# coding: utf-8

"""
    Stream Video API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v80.4.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from stream_sdks.model import schemas  # noqa: F401


class CallSettingsResponse(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "screensharing",
            "transcription",
            "ring",
            "backstage",
            "recording",
            "audio",
            "video",
            "geofencing",
            "broadcasting",
        }

        class properties:
            @staticmethod
            def audio() -> typing.Type["AudioSettings"]:
                return AudioSettings

            @staticmethod
            def backstage() -> typing.Type["BackstageSettings"]:
                return BackstageSettings

            @staticmethod
            def broadcasting() -> typing.Type["BroadcastSettings"]:
                return BroadcastSettings

            @staticmethod
            def geofencing() -> typing.Type["GeofenceSettings"]:
                return GeofenceSettings

            @staticmethod
            def recording() -> typing.Type["RecordSettings"]:
                return RecordSettings

            @staticmethod
            def ring() -> typing.Type["RingSettings"]:
                return RingSettings

            @staticmethod
            def screensharing() -> typing.Type["ScreensharingSettings"]:
                return ScreensharingSettings

            @staticmethod
            def transcription() -> typing.Type["TranscriptionSettings"]:
                return TranscriptionSettings

            @staticmethod
            def video() -> typing.Type["VideoSettings"]:
                return VideoSettings

            __annotations__ = {
                "audio": audio,
                "backstage": backstage,
                "broadcasting": broadcasting,
                "geofencing": geofencing,
                "recording": recording,
                "ring": ring,
                "screensharing": screensharing,
                "transcription": transcription,
                "video": video,
            }

    screensharing: "ScreensharingSettings"
    transcription: "TranscriptionSettings"
    ring: "RingSettings"
    backstage: "BackstageSettings"
    recording: "RecordSettings"
    audio: "AudioSettings"
    video: "VideoSettings"
    geofencing: "GeofenceSettings"
    broadcasting: "BroadcastSettings"

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["audio"]) -> "AudioSettings":
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["backstage"]
    ) -> "BackstageSettings":
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["broadcasting"]
    ) -> "BroadcastSettings":
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["geofencing"]
    ) -> "GeofenceSettings":
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["recording"]
    ) -> "RecordSettings":
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ring"]) -> "RingSettings":
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["screensharing"]
    ) -> "ScreensharingSettings":
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["transcription"]
    ) -> "TranscriptionSettings":
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["video"]) -> "VideoSettings":
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "audio",
                "backstage",
                "broadcasting",
                "geofencing",
                "recording",
                "ring",
                "screensharing",
                "transcription",
                "video",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["audio"]
    ) -> "AudioSettings":
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["backstage"]
    ) -> "BackstageSettings":
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["broadcasting"]
    ) -> "BroadcastSettings":
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["geofencing"]
    ) -> "GeofenceSettings":
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["recording"]
    ) -> "RecordSettings":
        ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ring"]) -> "RingSettings":
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["screensharing"]
    ) -> "ScreensharingSettings":
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["transcription"]
    ) -> "TranscriptionSettings":
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["video"]
    ) -> "VideoSettings":
        ...

    @typing.overload
    def get_item_oapg(
        self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "audio",
                "backstage",
                "broadcasting",
                "geofencing",
                "recording",
                "ring",
                "screensharing",
                "transcription",
                "video",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        screensharing: "ScreensharingSettings",
        transcription: "TranscriptionSettings",
        ring: "RingSettings",
        backstage: "BackstageSettings",
        recording: "RecordSettings",
        audio: "AudioSettings",
        video: "VideoSettings",
        geofencing: "GeofenceSettings",
        broadcasting: "BroadcastSettings",
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "CallSettingsResponse":
        return super().__new__(
            cls,
            *_args,
            screensharing=screensharing,
            transcription=transcription,
            ring=ring,
            backstage=backstage,
            recording=recording,
            audio=audio,
            video=video,
            geofencing=geofencing,
            broadcasting=broadcasting,
            _configuration=_configuration,
            **kwargs,
        )


from stream_sdks.model.audio_settings import AudioSettings
from stream_sdks.model.backstage_settings import BackstageSettings
from stream_sdks.model.broadcast_settings import BroadcastSettings
from stream_sdks.model.geofence_settings import GeofenceSettings
from stream_sdks.model.record_settings import RecordSettings
from stream_sdks.model.ring_settings import RingSettings
from stream_sdks.model.screensharing_settings import ScreensharingSettings
from stream_sdks.model.transcription_settings import TranscriptionSettings
from stream_sdks.model.video_settings import VideoSettings
