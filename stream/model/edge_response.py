# coding: utf-8

"""
    Stream Video API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v79.45.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from stream.model import schemas  # noqa: F401


class EdgeResponse(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "red",
            "country_iso_code",
            "green",
            "latitude",
            "yellow",
            "continent_code",
            "latency_test_url",
            "id",
            "subdivision_iso_code",
            "longitude",
        }

        class properties:
            continent_code = schemas.StrSchema
            country_iso_code = schemas.StrSchema
            green = schemas.Int32Schema
            id = schemas.StrSchema
            latency_test_url = schemas.StrSchema
            latitude = schemas.Float32Schema
            longitude = schemas.Float32Schema
            red = schemas.Int32Schema
            subdivision_iso_code = schemas.StrSchema
            yellow = schemas.Int32Schema
            __annotations__ = {
                "continent_code": continent_code,
                "country_iso_code": country_iso_code,
                "green": green,
                "id": id,
                "latency_test_url": latency_test_url,
                "latitude": latitude,
                "longitude": longitude,
                "red": red,
                "subdivision_iso_code": subdivision_iso_code,
                "yellow": yellow,
            }

    red: MetaOapg.properties.red
    country_iso_code: MetaOapg.properties.country_iso_code
    green: MetaOapg.properties.green
    latitude: MetaOapg.properties.latitude
    yellow: MetaOapg.properties.yellow
    continent_code: MetaOapg.properties.continent_code
    latency_test_url: MetaOapg.properties.latency_test_url
    id: MetaOapg.properties.id
    subdivision_iso_code: MetaOapg.properties.subdivision_iso_code
    longitude: MetaOapg.properties.longitude

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["continent_code"]
    ) -> MetaOapg.properties.continent_code:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["country_iso_code"]
    ) -> MetaOapg.properties.country_iso_code:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["green"]
    ) -> MetaOapg.properties.green:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["id"]
    ) -> MetaOapg.properties.id:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["latency_test_url"]
    ) -> MetaOapg.properties.latency_test_url:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["latitude"]
    ) -> MetaOapg.properties.latitude:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["longitude"]
    ) -> MetaOapg.properties.longitude:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["red"]
    ) -> MetaOapg.properties.red:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["subdivision_iso_code"]
    ) -> MetaOapg.properties.subdivision_iso_code:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["yellow"]
    ) -> MetaOapg.properties.yellow:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "continent_code",
                "country_iso_code",
                "green",
                "id",
                "latency_test_url",
                "latitude",
                "longitude",
                "red",
                "subdivision_iso_code",
                "yellow",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["continent_code"]
    ) -> MetaOapg.properties.continent_code:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["country_iso_code"]
    ) -> MetaOapg.properties.country_iso_code:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["green"]
    ) -> MetaOapg.properties.green:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["id"]
    ) -> MetaOapg.properties.id:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["latency_test_url"]
    ) -> MetaOapg.properties.latency_test_url:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["latitude"]
    ) -> MetaOapg.properties.latitude:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["longitude"]
    ) -> MetaOapg.properties.longitude:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["red"]
    ) -> MetaOapg.properties.red:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["subdivision_iso_code"]
    ) -> MetaOapg.properties.subdivision_iso_code:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["yellow"]
    ) -> MetaOapg.properties.yellow:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "continent_code",
                "country_iso_code",
                "green",
                "id",
                "latency_test_url",
                "latitude",
                "longitude",
                "red",
                "subdivision_iso_code",
                "yellow",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        red: typing.Union[
            MetaOapg.properties.red,
            decimal.Decimal,
            int,
        ],
        country_iso_code: typing.Union[
            MetaOapg.properties.country_iso_code,
            str,
        ],
        green: typing.Union[
            MetaOapg.properties.green,
            decimal.Decimal,
            int,
        ],
        latitude: typing.Union[
            MetaOapg.properties.latitude,
            decimal.Decimal,
            int,
            float,
        ],
        yellow: typing.Union[
            MetaOapg.properties.yellow,
            decimal.Decimal,
            int,
        ],
        continent_code: typing.Union[
            MetaOapg.properties.continent_code,
            str,
        ],
        latency_test_url: typing.Union[
            MetaOapg.properties.latency_test_url,
            str,
        ],
        id: typing.Union[
            MetaOapg.properties.id,
            str,
        ],
        subdivision_iso_code: typing.Union[
            MetaOapg.properties.subdivision_iso_code,
            str,
        ],
        longitude: typing.Union[
            MetaOapg.properties.longitude,
            decimal.Decimal,
            int,
            float,
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "EdgeResponse":
        return super().__new__(
            cls,
            *_args,
            red=red,
            country_iso_code=country_iso_code,
            green=green,
            latitude=latitude,
            yellow=yellow,
            continent_code=continent_code,
            latency_test_url=latency_test_url,
            id=id,
            subdivision_iso_code=subdivision_iso_code,
            longitude=longitude,
            _configuration=_configuration,
            **kwargs,
        )
