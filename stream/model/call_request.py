# coding: utf-8

"""
    Stream Video API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v79.45.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class CallRequest(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        class properties:
            @staticmethod
            def created_by() -> typing.Type["UserRequest"]:
                return UserRequest

            created_by_id = schemas.StrSchema

            class custom(schemas.DictSchema):
                class MetaOapg:
                    additional_properties = schemas.AnyTypeSchema

                def __getitem__(
                    self, name: typing.Union[str,]
                ) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)

                def get_item_oapg(
                    self, name: typing.Union[str,]
                ) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)

                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[
                        MetaOapg.additional_properties,
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        bool,
                        None,
                        list,
                        tuple,
                        bytes,
                        io.FileIO,
                        io.BufferedReader,
                    ],
                ) -> "custom":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )

            class members(schemas.ListSchema):
                class MetaOapg:
                    @staticmethod
                    def items() -> typing.Type["MemberRequest"]:
                        return MemberRequest

                def __new__(
                    cls,
                    _arg: typing.Union[
                        typing.Tuple["MemberRequest"], typing.List["MemberRequest"]
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "members":
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> "MemberRequest":
                    return super().__getitem__(i)

            @staticmethod
            def settings_override() -> typing.Type["CallSettingsRequest"]:
                return CallSettingsRequest

            starts_at = schemas.DateTimeSchema
            team = schemas.StrSchema
            __annotations__ = {
                "created_by": created_by,
                "created_by_id": created_by_id,
                "custom": custom,
                "members": members,
                "settings_override": settings_override,
                "starts_at": starts_at,
                "team": team,
            }

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["created_by"]
    ) -> "UserRequest":
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["created_by_id"]
    ) -> MetaOapg.properties.created_by_id:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["custom"]
    ) -> MetaOapg.properties.custom:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["members"]
    ) -> MetaOapg.properties.members:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["settings_override"]
    ) -> "CallSettingsRequest":
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["starts_at"]
    ) -> MetaOapg.properties.starts_at:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["team"]
    ) -> MetaOapg.properties.team:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "created_by",
                "created_by_id",
                "custom",
                "members",
                "settings_override",
                "starts_at",
                "team",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["created_by"]
    ) -> typing.Union["UserRequest", schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["created_by_id"]
    ) -> typing.Union[MetaOapg.properties.created_by_id, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["custom"]
    ) -> typing.Union[MetaOapg.properties.custom, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["members"]
    ) -> typing.Union[MetaOapg.properties.members, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["settings_override"]
    ) -> typing.Union["CallSettingsRequest", schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["starts_at"]
    ) -> typing.Union[MetaOapg.properties.starts_at, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["team"]
    ) -> typing.Union[MetaOapg.properties.team, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "created_by",
                "created_by_id",
                "custom",
                "members",
                "settings_override",
                "starts_at",
                "team",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        created_by: typing.Union["UserRequest", schemas.Unset] = schemas.unset,
        created_by_id: typing.Union[
            MetaOapg.properties.created_by_id, str, schemas.Unset
        ] = schemas.unset,
        custom: typing.Union[
            MetaOapg.properties.custom, dict, frozendict.frozendict, schemas.Unset
        ] = schemas.unset,
        members: typing.Union[
            MetaOapg.properties.members, list, tuple, schemas.Unset
        ] = schemas.unset,
        settings_override: typing.Union[
            "CallSettingsRequest", schemas.Unset
        ] = schemas.unset,
        starts_at: typing.Union[
            MetaOapg.properties.starts_at, str, datetime, schemas.Unset
        ] = schemas.unset,
        team: typing.Union[
            MetaOapg.properties.team, str, schemas.Unset
        ] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "CallRequest":
        return super().__new__(
            cls,
            *_args,
            created_by=created_by,
            created_by_id=created_by_id,
            custom=custom,
            members=members,
            settings_override=settings_override,
            starts_at=starts_at,
            team=team,
            _configuration=_configuration,
            **kwargs,
        )


from openapi_client.model.call_settings_request import CallSettingsRequest
from openapi_client.model.member_request import MemberRequest
from openapi_client.model.user_request import UserRequest
