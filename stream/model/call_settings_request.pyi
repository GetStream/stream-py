# coding: utf-8

"""
    Stream Video API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v79.45.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class CallSettingsRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def audio() -> typing.Type['AudioSettingsRequest']:
                return AudioSettingsRequest
        
            @staticmethod
            def backstage() -> typing.Type['BackstageSettingsRequest']:
                return BackstageSettingsRequest
        
            @staticmethod
            def geofencing() -> typing.Type['GeofenceSettingsRequest']:
                return GeofenceSettingsRequest
        
            @staticmethod
            def recording() -> typing.Type['RecordSettingsRequest']:
                return RecordSettingsRequest
        
            @staticmethod
            def ring() -> typing.Type['RingSettingsRequest']:
                return RingSettingsRequest
        
            @staticmethod
            def screensharing() -> typing.Type['ScreensharingSettingsRequest']:
                return ScreensharingSettingsRequest
        
            @staticmethod
            def transcription() -> typing.Type['TranscriptionSettingsRequest']:
                return TranscriptionSettingsRequest
        
            @staticmethod
            def video() -> typing.Type['VideoSettingsRequest']:
                return VideoSettingsRequest
            __annotations__ = {
                "audio": audio,
                "backstage": backstage,
                "geofencing": geofencing,
                "recording": recording,
                "ring": ring,
                "screensharing": screensharing,
                "transcription": transcription,
                "video": video,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["audio"]) -> 'AudioSettingsRequest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["backstage"]) -> 'BackstageSettingsRequest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["geofencing"]) -> 'GeofenceSettingsRequest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recording"]) -> 'RecordSettingsRequest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ring"]) -> 'RingSettingsRequest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["screensharing"]) -> 'ScreensharingSettingsRequest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transcription"]) -> 'TranscriptionSettingsRequest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["video"]) -> 'VideoSettingsRequest': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["audio", "backstage", "geofencing", "recording", "ring", "screensharing", "transcription", "video", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["audio"]) -> typing.Union['AudioSettingsRequest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["backstage"]) -> typing.Union['BackstageSettingsRequest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["geofencing"]) -> typing.Union['GeofenceSettingsRequest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recording"]) -> typing.Union['RecordSettingsRequest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ring"]) -> typing.Union['RingSettingsRequest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["screensharing"]) -> typing.Union['ScreensharingSettingsRequest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transcription"]) -> typing.Union['TranscriptionSettingsRequest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["video"]) -> typing.Union['VideoSettingsRequest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["audio", "backstage", "geofencing", "recording", "ring", "screensharing", "transcription", "video", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        audio: typing.Union['AudioSettingsRequest', schemas.Unset] = schemas.unset,
        backstage: typing.Union['BackstageSettingsRequest', schemas.Unset] = schemas.unset,
        geofencing: typing.Union['GeofenceSettingsRequest', schemas.Unset] = schemas.unset,
        recording: typing.Union['RecordSettingsRequest', schemas.Unset] = schemas.unset,
        ring: typing.Union['RingSettingsRequest', schemas.Unset] = schemas.unset,
        screensharing: typing.Union['ScreensharingSettingsRequest', schemas.Unset] = schemas.unset,
        transcription: typing.Union['TranscriptionSettingsRequest', schemas.Unset] = schemas.unset,
        video: typing.Union['VideoSettingsRequest', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CallSettingsRequest':
        return super().__new__(
            cls,
            *_args,
            audio=audio,
            backstage=backstage,
            geofencing=geofencing,
            recording=recording,
            ring=ring,
            screensharing=screensharing,
            transcription=transcription,
            video=video,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.audio_settings_request import AudioSettingsRequest
from openapi_client.model.backstage_settings_request import BackstageSettingsRequest
from openapi_client.model.geofence_settings_request import GeofenceSettingsRequest
from openapi_client.model.record_settings_request import RecordSettingsRequest
from openapi_client.model.ring_settings_request import RingSettingsRequest
from openapi_client.model.screensharing_settings_request import ScreensharingSettingsRequest
from openapi_client.model.transcription_settings_request import TranscriptionSettingsRequest
from openapi_client.model.video_settings_request import VideoSettingsRequest
