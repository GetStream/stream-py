# coding: utf-8

"""
    Stream Video API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v80.4.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from getstream.model import schemas  # noqa: F401


class GetCallEdgeServerRequest(
    schemas.DictBase, schemas.NoneBase, schemas.Schema, schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "latency_measurements",
        }

        class properties:
            class latency_measurements(schemas.DictSchema):
                class MetaOapg:
                    class additional_properties(schemas.ListSchema):
                        class MetaOapg:
                            items = schemas.Float32Schema

                        def __new__(
                            cls,
                            _arg: typing.Union[
                                typing.Tuple[
                                    typing.Union[
                                        MetaOapg.items,
                                        decimal.Decimal,
                                        int,
                                        float,
                                    ]
                                ],
                                typing.List[
                                    typing.Union[
                                        MetaOapg.items,
                                        decimal.Decimal,
                                        int,
                                        float,
                                    ]
                                ],
                            ],
                            _configuration: typing.Optional[
                                schemas.Configuration
                            ] = None,
                        ) -> "additional_properties":
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )

                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)

                def __getitem__(
                    self, name: typing.Union[str,]
                ) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)

                def get_item_oapg(
                    self, name: typing.Union[str,]
                ) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)

                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[
                        MetaOapg.additional_properties,
                        list,
                        tuple,
                    ],
                ) -> "latency_measurements":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )

            __annotations__ = {
                "latency_measurements": latency_measurements,
            }

    latency_measurements: MetaOapg.properties.latency_measurements

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["latency_measurements"]
    ) -> MetaOapg.properties.latency_measurements:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[typing_extensions.Literal["latency_measurements",], str],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["latency_measurements"]
    ) -> MetaOapg.properties.latency_measurements:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[typing_extensions.Literal["latency_measurements",], str],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
            None,
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "GetCallEdgeServerRequest":
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )
