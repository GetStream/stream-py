# Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.
from getstream.base import BaseClient
from getstream.models import *
from getstream.stream_response import StreamResponse
from getstream.utils import build_query_param, build_body_dict


class ModerationRestClient(BaseClient):
    def __init__(self, api_key: str, base_url: str, timeout: float, token: str):
        """
        Initializes ModerationClient with BaseClient instance
        :param api_key: A string representing the client's API key
        :param base_url: A string representing the base uniform resource locator
        :param timeout: A number representing the time limit for a request
        :param token: A string instance representing the client's token
        """
        super().__init__(
            api_key=api_key,
            base_url=base_url,
            timeout=timeout,
            token=token,
        )

    def ban(
        self,
        target_user_id: str,
        banned_by_id: Optional[str] = None,
        channel_cid: Optional[str] = None,
        delete_messages: Optional[str] = None,
        ip_ban: Optional[bool] = None,
        reason: Optional[str] = None,
        shadow: Optional[bool] = None,
        timeout: Optional[int] = None,
        banned_by: Optional[UserRequest] = None,
    ) -> StreamResponse[BanResponse]:
        json = build_body_dict(
            target_user_id=target_user_id,
            banned_by_id=banned_by_id,
            channel_cid=channel_cid,
            delete_messages=delete_messages,
            ip_ban=ip_ban,
            reason=reason,
            shadow=shadow,
            timeout=timeout,
            banned_by=banned_by,
        )

        return self.post("/api/v2/moderation/ban", BanResponse, json=json)

    def bulk_image_moderation(
        self, csv_file: str
    ) -> StreamResponse[BulkImageModerationResponse]:
        json = build_body_dict(csv_file=csv_file)

        return self.post(
            "/api/v2/moderation/bulk_image_moderation",
            BulkImageModerationResponse,
            json=json,
        )

    def check(
        self,
        config_key: str,
        entity_creator_id: str,
        entity_id: str,
        entity_type: str,
        config_team: Optional[str] = None,
        test_mode: Optional[bool] = None,
        user_id: Optional[str] = None,
        moderation_payload: Optional[ModerationPayload] = None,
        options: Optional[Dict[str, object]] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[CheckResponse]:
        json = build_body_dict(
            config_key=config_key,
            entity_creator_id=entity_creator_id,
            entity_id=entity_id,
            entity_type=entity_type,
            config_team=config_team,
            test_mode=test_mode,
            user_id=user_id,
            moderation_payload=moderation_payload,
            options=options,
            user=user,
        )

        return self.post("/api/v2/moderation/check", CheckResponse, json=json)

    def upsert_config(
        self,
        key: str,
        _async: Optional[bool] = None,
        team: Optional[str] = None,
        user_id: Optional[str] = None,
        ai_image_config: Optional[AIImageConfig] = None,
        ai_text_config: Optional[AITextConfig] = None,
        ai_video_config: Optional[AIVideoConfig] = None,
        automod_platform_circumvention_config: Optional[
            AutomodPlatformCircumventionConfig
        ] = None,
        automod_semantic_filters_config: Optional[AutomodSemanticFiltersConfig] = None,
        automod_toxicity_config: Optional[AutomodToxicityConfig] = None,
        aws_rekognition_config: Optional[AIImageConfig] = None,
        block_list_config: Optional[BlockListConfig] = None,
        bodyguard_config: Optional[AITextConfig] = None,
        google_vision_config: Optional[GoogleVisionConfig] = None,
        rule_builder_config: Optional[RuleBuilderConfig] = None,
        user: Optional[UserRequest] = None,
        velocity_filter_config: Optional[VelocityFilterConfig] = None,
    ) -> StreamResponse[UpsertConfigResponse]:
        json = build_body_dict(
            key=key,
            _async=_async,
            team=team,
            user_id=user_id,
            ai_image_config=ai_image_config,
            ai_text_config=ai_text_config,
            ai_video_config=ai_video_config,
            automod_platform_circumvention_config=automod_platform_circumvention_config,
            automod_semantic_filters_config=automod_semantic_filters_config,
            automod_toxicity_config=automod_toxicity_config,
            aws_rekognition_config=aws_rekognition_config,
            block_list_config=block_list_config,
            bodyguard_config=bodyguard_config,
            google_vision_config=google_vision_config,
            rule_builder_config=rule_builder_config,
            user=user,
            velocity_filter_config=velocity_filter_config,
        )

        return self.post("/api/v2/moderation/config", UpsertConfigResponse, json=json)

    def delete_config(
        self, key: str, team: Optional[str] = None
    ) -> StreamResponse[DeleteModerationConfigResponse]:
        query_params = build_query_param(team=team)
        path_params = {
            "key": key,
        }

        return self.delete(
            "/api/v2/moderation/config/{key}",
            DeleteModerationConfigResponse,
            query_params=query_params,
            path_params=path_params,
        )

    def get_config(
        self, key: str, team: Optional[str] = None
    ) -> StreamResponse[GetConfigResponse]:
        query_params = build_query_param(team=team)
        path_params = {
            "key": key,
        }

        return self.get(
            "/api/v2/moderation/config/{key}",
            GetConfigResponse,
            query_params=query_params,
            path_params=path_params,
        )

    def query_moderation_configs(
        self,
        limit: Optional[int] = None,
        next: Optional[str] = None,
        prev: Optional[str] = None,
        user_id: Optional[str] = None,
        sort: Optional[List[SortParamRequest]] = None,
        filter: Optional[Dict[str, object]] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[QueryModerationConfigsResponse]:
        json = build_body_dict(
            limit=limit,
            next=next,
            prev=prev,
            user_id=user_id,
            sort=sort,
            filter=filter,
            user=user,
        )

        return self.post(
            "/api/v2/moderation/configs", QueryModerationConfigsResponse, json=json
        )

    def custom_check(
        self,
        entity_id: str,
        entity_type: str,
        flags: List[CustomCheckFlag],
        entity_creator_id: Optional[str] = None,
        user_id: Optional[str] = None,
        moderation_payload: Optional[ModerationPayload] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[CustomCheckResponse]:
        json = build_body_dict(
            entity_id=entity_id,
            entity_type=entity_type,
            flags=flags,
            entity_creator_id=entity_creator_id,
            user_id=user_id,
            moderation_payload=moderation_payload,
            user=user,
        )

        return self.post(
            "/api/v2/moderation/custom_check", CustomCheckResponse, json=json
        )

    def v2_delete_template(self) -> StreamResponse[DeleteModerationTemplateResponse]:
        return self.delete(
            "/api/v2/moderation/feeds_moderation_template",
            DeleteModerationTemplateResponse,
        )

    def v2_query_templates(
        self,
    ) -> StreamResponse[QueryFeedModerationTemplatesResponse]:
        return self.get(
            "/api/v2/moderation/feeds_moderation_template",
            QueryFeedModerationTemplatesResponse,
        )

    def v2_upsert_template(
        self, name: str, config: FeedsModerationTemplateConfig
    ) -> StreamResponse[UpsertModerationTemplateResponse]:
        json = build_body_dict(name=name, config=config)

        return self.post(
            "/api/v2/moderation/feeds_moderation_template",
            UpsertModerationTemplateResponse,
            json=json,
        )

    def flag(
        self,
        entity_id: str,
        entity_type: str,
        entity_creator_id: Optional[str] = None,
        reason: Optional[str] = None,
        user_id: Optional[str] = None,
        custom: Optional[Dict[str, object]] = None,
        moderation_payload: Optional[ModerationPayload] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[FlagResponse]:
        json = build_body_dict(
            entity_id=entity_id,
            entity_type=entity_type,
            entity_creator_id=entity_creator_id,
            reason=reason,
            user_id=user_id,
            custom=custom,
            moderation_payload=moderation_payload,
            user=user,
        )

        return self.post("/api/v2/moderation/flag", FlagResponse, json=json)

    def query_moderation_flags(
        self,
        limit: Optional[int] = None,
        next: Optional[str] = None,
        prev: Optional[str] = None,
        sort: Optional[List[SortParam]] = None,
        filter: Optional[Dict[str, object]] = None,
    ) -> StreamResponse[QueryModerationFlagsResponse]:
        json = build_body_dict(
            limit=limit, next=next, prev=prev, sort=sort, filter=filter
        )

        return self.post(
            "/api/v2/moderation/flags", QueryModerationFlagsResponse, json=json
        )

    def query_moderation_logs(
        self,
        limit: Optional[int] = None,
        next: Optional[str] = None,
        prev: Optional[str] = None,
        user_id: Optional[str] = None,
        sort: Optional[List[SortParamRequest]] = None,
        filter: Optional[Dict[str, object]] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[QueryModerationLogsResponse]:
        json = build_body_dict(
            limit=limit,
            next=next,
            prev=prev,
            user_id=user_id,
            sort=sort,
            filter=filter,
            user=user,
        )

        return self.post(
            "/api/v2/moderation/logs", QueryModerationLogsResponse, json=json
        )

    def mute(
        self,
        target_ids: List[str],
        timeout: Optional[int] = None,
        user_id: Optional[str] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[MuteResponse]:
        json = build_body_dict(
            target_ids=target_ids, timeout=timeout, user_id=user_id, user=user
        )

        return self.post("/api/v2/moderation/mute", MuteResponse, json=json)

    def query_review_queue(
        self,
        limit: Optional[int] = None,
        lock_count: Optional[int] = None,
        lock_duration: Optional[int] = None,
        lock_items: Optional[bool] = None,
        next: Optional[str] = None,
        prev: Optional[str] = None,
        stats_only: Optional[bool] = None,
        user_id: Optional[str] = None,
        sort: Optional[List[SortParamRequest]] = None,
        filter: Optional[Dict[str, object]] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[QueryReviewQueueResponse]:
        json = build_body_dict(
            limit=limit,
            lock_count=lock_count,
            lock_duration=lock_duration,
            lock_items=lock_items,
            next=next,
            prev=prev,
            stats_only=stats_only,
            user_id=user_id,
            sort=sort,
            filter=filter,
            user=user,
        )

        return self.post(
            "/api/v2/moderation/review_queue", QueryReviewQueueResponse, json=json
        )

    def get_review_queue_item(
        self, id: str
    ) -> StreamResponse[GetReviewQueueItemResponse]:
        path_params = {
            "id": id,
        }

        return self.get(
            "/api/v2/moderation/review_queue/{id}",
            GetReviewQueueItemResponse,
            path_params=path_params,
        )

    def submit_action(
        self,
        action_type: str,
        item_id: str,
        user_id: Optional[str] = None,
        ban: Optional[BanActionRequest] = None,
        custom: Optional[CustomActionRequest] = None,
        delete_activity: Optional[DeleteActivityRequest] = None,
        delete_message: Optional[DeleteMessageRequest] = None,
        delete_reaction: Optional[DeleteReactionRequest] = None,
        delete_user: Optional[DeleteUserRequest] = None,
        mark_reviewed: Optional[MarkReviewedRequest] = None,
        unban: Optional[UnbanActionRequest] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[SubmitActionResponse]:
        json = build_body_dict(
            action_type=action_type,
            item_id=item_id,
            user_id=user_id,
            ban=ban,
            custom=custom,
            delete_activity=delete_activity,
            delete_message=delete_message,
            delete_reaction=delete_reaction,
            delete_user=delete_user,
            mark_reviewed=mark_reviewed,
            unban=unban,
            user=user,
        )

        return self.post(
            "/api/v2/moderation/submit_action", SubmitActionResponse, json=json
        )

    def unban(
        self,
        target_user_id: str,
        channel_cid: Optional[str] = None,
        created_by: Optional[str] = None,
        unbanned_by_id: Optional[str] = None,
        unbanned_by: Optional[UserRequest] = None,
    ) -> StreamResponse[UnbanResponse]:
        query_params = build_query_param(
            target_user_id=target_user_id,
            channel_cid=channel_cid,
            created_by=created_by,
        )
        json = build_body_dict(unbanned_by_id=unbanned_by_id, unbanned_by=unbanned_by)

        return self.post(
            "/api/v2/moderation/unban",
            UnbanResponse,
            query_params=query_params,
            json=json,
        )

    def unmute(
        self,
        target_ids: List[str],
        user_id: Optional[str] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[UnmuteResponse]:
        json = build_body_dict(target_ids=target_ids, user_id=user_id, user=user)

        return self.post("/api/v2/moderation/unmute", UnmuteResponse, json=json)
