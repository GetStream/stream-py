# Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.
from getstream.models import *
from getstream.stream_response import StreamResponse


class Channel:
    def __init__(
        self,
        client,
        channel_type: str,
        channel_id: str = None,
        custom_data: Dict = None,
    ):
        self.channel_id = channel_id
        self.channel_type = channel_type
        self.client = client
        self.custom_data = custom_data or {}

    def _sync_from_response(self, data):
        if hasattr(data, "channel") and isinstance(data.channel, ChannelResponse):
            self.custom_data = data.channel.custom

    async def delete(
        self, hard_delete: Optional[bool] = None
    ) -> StreamResponse[DeleteChannelResponse]:
        response = await self.client.delete_channel(
            type=self.channel_type, id=self.channel_id, hard_delete=hard_delete
        )
        self._sync_from_response(response.data)
        return response

    async def update_channel_partial(
        self,
        user_id: Optional[str] = None,
        unset: Optional[List[str]] = None,
        set: Optional[Dict[str, object]] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[UpdateChannelPartialResponse]:
        response = await self.client.update_channel_partial(
            type=self.channel_type,
            id=self.channel_id,
            user_id=user_id,
            unset=unset,
            set=set,
            user=user,
        )
        self._sync_from_response(response.data)
        return response

    async def update(
        self,
        accept_invite: Optional[bool] = None,
        cooldown: Optional[int] = None,
        hide_history: Optional[bool] = None,
        reject_invite: Optional[bool] = None,
        skip_push: Optional[bool] = None,
        user_id: Optional[str] = None,
        add_members: Optional[List[ChannelMember]] = None,
        add_moderators: Optional[List[str]] = None,
        assign_roles: Optional[List[ChannelMember]] = None,
        demote_moderators: Optional[List[str]] = None,
        invites: Optional[List[ChannelMember]] = None,
        remove_members: Optional[List[str]] = None,
        data: Optional[ChannelInput] = None,
        message: Optional[MessageRequest] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[UpdateChannelResponse]:
        response = await self.client.update_channel(
            type=self.channel_type,
            id=self.channel_id,
            accept_invite=accept_invite,
            cooldown=cooldown,
            hide_history=hide_history,
            reject_invite=reject_invite,
            skip_push=skip_push,
            user_id=user_id,
            add_members=add_members,
            add_moderators=add_moderators,
            assign_roles=assign_roles,
            demote_moderators=demote_moderators,
            invites=invites,
            remove_members=remove_members,
            data=data,
            message=message,
            user=user,
        )
        self._sync_from_response(response.data)
        return response

    async def delete_draft(
        self, parent_id: Optional[str] = None, user_id: Optional[str] = None
    ) -> StreamResponse[Response]:
        response = await self.client.delete_draft(
            type=self.channel_type,
            id=self.channel_id,
            parent_id=parent_id,
            user_id=user_id,
        )
        self._sync_from_response(response.data)
        return response

    async def get_draft(
        self, parent_id: Optional[str] = None, user_id: Optional[str] = None
    ) -> StreamResponse[GetDraftResponse]:
        response = await self.client.get_draft(
            type=self.channel_type,
            id=self.channel_id,
            parent_id=parent_id,
            user_id=user_id,
        )
        self._sync_from_response(response.data)
        return response

    async def send_event(self, event: EventRequest) -> StreamResponse[EventResponse]:
        response = await self.client.send_event(
            type=self.channel_type, id=self.channel_id, event=event
        )
        self._sync_from_response(response.data)
        return response

    async def delete_file(self, url: Optional[str] = None) -> StreamResponse[Response]:
        response = await self.client.delete_file(
            type=self.channel_type, id=self.channel_id, url=url
        )
        self._sync_from_response(response.data)
        return response

    async def upload_file(
        self, file: Optional[str] = None, user: Optional[OnlyUserID] = None
    ) -> StreamResponse[FileUploadResponse]:
        response = await self.client.upload_file(
            type=self.channel_type, id=self.channel_id, file=file, user=user
        )
        self._sync_from_response(response.data)
        return response

    async def hide(
        self,
        clear_history: Optional[bool] = None,
        user_id: Optional[str] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[HideChannelResponse]:
        response = await self.client.hide_channel(
            type=self.channel_type,
            id=self.channel_id,
            clear_history=clear_history,
            user_id=user_id,
            user=user,
        )
        self._sync_from_response(response.data)
        return response

    async def delete_image(self, url: Optional[str] = None) -> StreamResponse[Response]:
        response = await self.client.delete_image(
            type=self.channel_type, id=self.channel_id, url=url
        )
        self._sync_from_response(response.data)
        return response

    async def upload_image(
        self,
        file: Optional[str] = None,
        upload_sizes: Optional[List[ImageSize]] = None,
        user: Optional[OnlyUserID] = None,
    ) -> StreamResponse[ImageUploadResponse]:
        response = await self.client.upload_image(
            type=self.channel_type,
            id=self.channel_id,
            file=file,
            upload_sizes=upload_sizes,
            user=user,
        )
        self._sync_from_response(response.data)
        return response

    async def update_member_partial(
        self,
        user_id: Optional[str] = None,
        unset: Optional[List[str]] = None,
        set: Optional[Dict[str, object]] = None,
    ) -> StreamResponse[UpdateMemberPartialResponse]:
        response = await self.client.update_member_partial(
            type=self.channel_type,
            id=self.channel_id,
            user_id=user_id,
            unset=unset,
            set=set,
        )
        self._sync_from_response(response.data)
        return response

    async def send_message(
        self,
        message: MessageRequest,
        force_moderation: Optional[bool] = None,
        keep_channel_hidden: Optional[bool] = None,
        pending: Optional[bool] = None,
        skip_enrich_url: Optional[bool] = None,
        skip_push: Optional[bool] = None,
        pending_message_metadata: Optional[Dict[str, str]] = None,
    ) -> StreamResponse[SendMessageResponse]:
        response = await self.client.send_message(
            type=self.channel_type,
            id=self.channel_id,
            message=message,
            force_moderation=force_moderation,
            keep_channel_hidden=keep_channel_hidden,
            pending=pending,
            skip_enrich_url=skip_enrich_url,
            skip_push=skip_push,
            pending_message_metadata=pending_message_metadata,
        )
        self._sync_from_response(response.data)
        return response

    async def get_many_messages(
        self, ids: List[str]
    ) -> StreamResponse[GetManyMessagesResponse]:
        response = await self.client.get_many_messages(
            type=self.channel_type, id=self.channel_id, ids=ids
        )
        self._sync_from_response(response.data)
        return response

    async def get_or_create(
        self,
        hide_for_creator: Optional[bool] = None,
        state: Optional[bool] = None,
        thread_unread_counts: Optional[bool] = None,
        data: Optional[ChannelInput] = None,
        members: Optional[PaginationParams] = None,
        messages: Optional[MessagePaginationParams] = None,
        watchers: Optional[PaginationParams] = None,
    ) -> StreamResponse[ChannelStateResponse]:
        response = await self.client.get_or_create_channel(
            type=self.channel_type,
            id=self.channel_id,
            hide_for_creator=hide_for_creator,
            state=state,
            thread_unread_counts=thread_unread_counts,
            data=data,
            members=members,
            messages=messages,
            watchers=watchers,
        )
        self._sync_from_response(response.data)
        return response

    async def mark_read(
        self,
        message_id: Optional[str] = None,
        thread_id: Optional[str] = None,
        user_id: Optional[str] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[MarkReadResponse]:
        response = await self.client.mark_read(
            type=self.channel_type,
            id=self.channel_id,
            message_id=message_id,
            thread_id=thread_id,
            user_id=user_id,
            user=user,
        )
        self._sync_from_response(response.data)
        return response

    async def show(
        self, user_id: Optional[str] = None, user: Optional[UserRequest] = None
    ) -> StreamResponse[ShowChannelResponse]:
        response = await self.client.show_channel(
            type=self.channel_type, id=self.channel_id, user_id=user_id, user=user
        )
        self._sync_from_response(response.data)
        return response

    async def truncate(
        self,
        hard_delete: Optional[bool] = None,
        skip_push: Optional[bool] = None,
        truncated_at: Optional[datetime] = None,
        user_id: Optional[str] = None,
        member_ids: Optional[List[str]] = None,
        message: Optional[MessageRequest] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[TruncateChannelResponse]:
        response = await self.client.truncate_channel(
            type=self.channel_type,
            id=self.channel_id,
            hard_delete=hard_delete,
            skip_push=skip_push,
            truncated_at=truncated_at,
            user_id=user_id,
            member_ids=member_ids,
            message=message,
            user=user,
        )
        self._sync_from_response(response.data)
        return response

    async def mark_unread(
        self,
        message_id: Optional[str] = None,
        thread_id: Optional[str] = None,
        user_id: Optional[str] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[Response]:
        response = await self.client.mark_unread(
            type=self.channel_type,
            id=self.channel_id,
            message_id=message_id,
            thread_id=thread_id,
            user_id=user_id,
            user=user,
        )
        self._sync_from_response(response.data)
        return response

    create = get_or_create
