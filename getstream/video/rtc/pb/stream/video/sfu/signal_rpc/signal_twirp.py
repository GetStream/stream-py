# -*- coding: utf-8 -*-
# Generated by https://github.com/verloop/twirpy/protoc-gen-twirpy.  DO NOT EDIT!
# source: video/sfu/signal_rpc/signal.proto

from google.protobuf import symbol_database as _symbol_database

from twirp.base import Endpoint
from twirp.server import TwirpServer
from twirp.client import TwirpClient

# Import the embedded AsyncTwirpClient using an absolute path
from getstream.video.rtc.twirp_async_client_embed import AsyncTwirpClient

# We no longer need the try/except block, assume async is available via the embed
_async_available = True

_sym_db = _symbol_database.Default()


class SignalServerServer(TwirpServer):
    def __init__(self, *args, service, server_path_prefix="/twirp"):
        super().__init__(service=service)
        self._prefix = f"{server_path_prefix}/stream.video.sfu.signal.SignalServer"
        self._endpoints = {
            "SetPublisher": Endpoint(
                service_name="SignalServer",
                name="SetPublisher",
                function=getattr(service, "SetPublisher"),
                input=_sym_db.GetSymbol("stream.video.sfu.signal.SetPublisherRequest"),
                output=_sym_db.GetSymbol(
                    "stream.video.sfu.signal.SetPublisherResponse"
                ),
            ),
            "SendAnswer": Endpoint(
                service_name="SignalServer",
                name="SendAnswer",
                function=getattr(service, "SendAnswer"),
                input=_sym_db.GetSymbol("stream.video.sfu.signal.SendAnswerRequest"),
                output=_sym_db.GetSymbol("stream.video.sfu.signal.SendAnswerResponse"),
            ),
            "IceTrickle": Endpoint(
                service_name="SignalServer",
                name="IceTrickle",
                function=getattr(service, "IceTrickle"),
                input=_sym_db.GetSymbol("stream.video.sfu.models.ICETrickle"),
                output=_sym_db.GetSymbol("stream.video.sfu.signal.ICETrickleResponse"),
            ),
            "UpdateSubscriptions": Endpoint(
                service_name="SignalServer",
                name="UpdateSubscriptions",
                function=getattr(service, "UpdateSubscriptions"),
                input=_sym_db.GetSymbol(
                    "stream.video.sfu.signal.UpdateSubscriptionsRequest"
                ),
                output=_sym_db.GetSymbol(
                    "stream.video.sfu.signal.UpdateSubscriptionsResponse"
                ),
            ),
            "UpdateMuteStates": Endpoint(
                service_name="SignalServer",
                name="UpdateMuteStates",
                function=getattr(service, "UpdateMuteStates"),
                input=_sym_db.GetSymbol(
                    "stream.video.sfu.signal.UpdateMuteStatesRequest"
                ),
                output=_sym_db.GetSymbol(
                    "stream.video.sfu.signal.UpdateMuteStatesResponse"
                ),
            ),
            "IceRestart": Endpoint(
                service_name="SignalServer",
                name="IceRestart",
                function=getattr(service, "IceRestart"),
                input=_sym_db.GetSymbol("stream.video.sfu.signal.ICERestartRequest"),
                output=_sym_db.GetSymbol("stream.video.sfu.signal.ICERestartResponse"),
            ),
            "SendStats": Endpoint(
                service_name="SignalServer",
                name="SendStats",
                function=getattr(service, "SendStats"),
                input=_sym_db.GetSymbol("stream.video.sfu.signal.SendStatsRequest"),
                output=_sym_db.GetSymbol("stream.video.sfu.signal.SendStatsResponse"),
            ),
            "StartNoiseCancellation": Endpoint(
                service_name="SignalServer",
                name="StartNoiseCancellation",
                function=getattr(service, "StartNoiseCancellation"),
                input=_sym_db.GetSymbol(
                    "stream.video.sfu.signal.StartNoiseCancellationRequest"
                ),
                output=_sym_db.GetSymbol(
                    "stream.video.sfu.signal.StartNoiseCancellationResponse"
                ),
            ),
            "StopNoiseCancellation": Endpoint(
                service_name="SignalServer",
                name="StopNoiseCancellation",
                function=getattr(service, "StopNoiseCancellation"),
                input=_sym_db.GetSymbol(
                    "stream.video.sfu.signal.StopNoiseCancellationRequest"
                ),
                output=_sym_db.GetSymbol(
                    "stream.video.sfu.signal.StopNoiseCancellationResponse"
                ),
            ),
        }


class SignalServerClient(TwirpClient):
    def SetPublisher(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
        return self._make_request(
            url=f"{server_path_prefix}/stream.video.sfu.signal.SignalServer/SetPublisher",
            ctx=ctx,
            request=request,
            response_obj=_sym_db.GetSymbol(
                "stream.video.sfu.signal.SetPublisherResponse"
            ),
            **kwargs,
        )

    def SendAnswer(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
        return self._make_request(
            url=f"{server_path_prefix}/stream.video.sfu.signal.SignalServer/SendAnswer",
            ctx=ctx,
            request=request,
            response_obj=_sym_db.GetSymbol(
                "stream.video.sfu.signal.SendAnswerResponse"
            ),
            **kwargs,
        )

    def IceTrickle(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
        return self._make_request(
            url=f"{server_path_prefix}/stream.video.sfu.signal.SignalServer/IceTrickle",
            ctx=ctx,
            request=request,
            response_obj=_sym_db.GetSymbol(
                "stream.video.sfu.signal.ICETrickleResponse"
            ),
            **kwargs,
        )

    def UpdateSubscriptions(
        self, *args, ctx, request, server_path_prefix="/twirp", **kwargs
    ):
        return self._make_request(
            url=f"{server_path_prefix}/stream.video.sfu.signal.SignalServer/UpdateSubscriptions",
            ctx=ctx,
            request=request,
            response_obj=_sym_db.GetSymbol(
                "stream.video.sfu.signal.UpdateSubscriptionsResponse"
            ),
            **kwargs,
        )

    def UpdateMuteStates(
        self, *args, ctx, request, server_path_prefix="/twirp", **kwargs
    ):
        return self._make_request(
            url=f"{server_path_prefix}/stream.video.sfu.signal.SignalServer/UpdateMuteStates",
            ctx=ctx,
            request=request,
            response_obj=_sym_db.GetSymbol(
                "stream.video.sfu.signal.UpdateMuteStatesResponse"
            ),
            **kwargs,
        )

    def IceRestart(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
        return self._make_request(
            url=f"{server_path_prefix}/stream.video.sfu.signal.SignalServer/IceRestart",
            ctx=ctx,
            request=request,
            response_obj=_sym_db.GetSymbol(
                "stream.video.sfu.signal.ICERestartResponse"
            ),
            **kwargs,
        )

    def SendStats(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
        return self._make_request(
            url=f"{server_path_prefix}/stream.video.sfu.signal.SignalServer/SendStats",
            ctx=ctx,
            request=request,
            response_obj=_sym_db.GetSymbol("stream.video.sfu.signal.SendStatsResponse"),
            **kwargs,
        )

    def StartNoiseCancellation(
        self, *args, ctx, request, server_path_prefix="/twirp", **kwargs
    ):
        return self._make_request(
            url=f"{server_path_prefix}/stream.video.sfu.signal.SignalServer/StartNoiseCancellation",
            ctx=ctx,
            request=request,
            response_obj=_sym_db.GetSymbol(
                "stream.video.sfu.signal.StartNoiseCancellationResponse"
            ),
            **kwargs,
        )

    def StopNoiseCancellation(
        self, *args, ctx, request, server_path_prefix="/twirp", **kwargs
    ):
        return self._make_request(
            url=f"{server_path_prefix}/stream.video.sfu.signal.SignalServer/StopNoiseCancellation",
            ctx=ctx,
            request=request,
            response_obj=_sym_db.GetSymbol(
                "stream.video.sfu.signal.StopNoiseCancellationResponse"
            ),
            **kwargs,
        )


# Use the embedded AsyncTwirpClient as the base class
class AsyncSignalServerClient(AsyncTwirpClient):
    async def SetPublisher(
        self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs
    ):
        return await self._make_request(
            url=f"{server_path_prefix}/stream.video.sfu.signal.SignalServer/SetPublisher",
            ctx=ctx,
            request=request,
            response_obj=_sym_db.GetSymbol(
                "stream.video.sfu.signal.SetPublisherResponse"
            ),
            session=session,
            **kwargs,
        )

    async def SendAnswer(
        self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs
    ):
        return await self._make_request(
            url=f"{server_path_prefix}/stream.video.sfu.signal.SignalServer/SendAnswer",
            ctx=ctx,
            request=request,
            response_obj=_sym_db.GetSymbol(
                "stream.video.sfu.signal.SendAnswerResponse"
            ),
            session=session,
            **kwargs,
        )

    async def IceTrickle(
        self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs
    ):
        return await self._make_request(
            url=f"{server_path_prefix}/stream.video.sfu.signal.SignalServer/IceTrickle",
            ctx=ctx,
            request=request,
            response_obj=_sym_db.GetSymbol(
                "stream.video.sfu.signal.ICETrickleResponse"
            ),
            session=session,
            **kwargs,
        )

    async def UpdateSubscriptions(
        self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs
    ):
        return await self._make_request(
            url=f"{server_path_prefix}/stream.video.sfu.signal.SignalServer/UpdateSubscriptions",
            ctx=ctx,
            request=request,
            response_obj=_sym_db.GetSymbol(
                "stream.video.sfu.signal.UpdateSubscriptionsResponse"
            ),
            session=session,
            **kwargs,
        )

    async def UpdateMuteStates(
        self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs
    ):
        return await self._make_request(
            url=f"{server_path_prefix}/stream.video.sfu.signal.SignalServer/UpdateMuteStates",
            ctx=ctx,
            request=request,
            response_obj=_sym_db.GetSymbol(
                "stream.video.sfu.signal.UpdateMuteStatesResponse"
            ),
            session=session,
            **kwargs,
        )

    async def IceRestart(
        self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs
    ):
        return await self._make_request(
            url=f"{server_path_prefix}/stream.video.sfu.signal.SignalServer/IceRestart",
            ctx=ctx,
            request=request,
            response_obj=_sym_db.GetSymbol(
                "stream.video.sfu.signal.ICERestartResponse"
            ),
            session=session,
            **kwargs,
        )

    async def SendStats(
        self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs
    ):
        return await self._make_request(
            url=f"{server_path_prefix}/stream.video.sfu.signal.SignalServer/SendStats",
            ctx=ctx,
            request=request,
            response_obj=_sym_db.GetSymbol(
                "stream.video.sfu.signal.SendStatsResponse"
            ),
            session=session,
            **kwargs,
        )

    async def StartNoiseCancellation(
        self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs
    ):
        return await self._make_request(
            url=f"{server_path_prefix}/stream.video.sfu.signal.SignalServer/StartNoiseCancellation",
            ctx=ctx,
            request=request,
            response_obj=_sym_db.GetSymbol(
                "stream.video.sfu.signal.StartNoiseCancellationResponse"
            ),
            session=session,
            **kwargs,
        )

    async def StopNoiseCancellation(
        self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs
    ):
        return await self._make_request(
            url=f"{server_path_prefix}/stream.video.sfu.signal.SignalServer/StopNoiseCancellation",
            ctx=ctx,
            request=request,
            response_obj=_sym_db.GetSymbol(
                "stream.video.sfu.signal.StopNoiseCancellationResponse"
            ),
            session=session,
            **kwargs,
        )
