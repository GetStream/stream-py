# Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.
from getstream.base import AsyncBaseClient
from getstream.common import telemetry
from getstream.models import *
from getstream.stream_response import StreamResponse
from getstream.utils import build_query_param, build_body_dict


class VideoRestClient(AsyncBaseClient):
    def __init__(
        self,
        api_key: str,
        base_url: str,
        timeout: float,
        token: str,
        user_agent: str = None,
    ):
        """
        Initializes VideoClient with BaseClient instance
        :param api_key: A string representing the client's API key
        :param base_url: A string representing the base uniform resource locator
        :param timeout: A number representing the time limit for a request
        :param token: A string instance representing the client's token
        :param user_agent: Optional custom user agent string
        """
        super().__init__(
            api_key=api_key,
            base_url=base_url,
            timeout=timeout,
            token=token,
            user_agent=user_agent,
        )

    @telemetry.operation_name("getstream.api.video.get_active_calls_status")
    async def get_active_calls_status(
        self,
    ) -> StreamResponse[GetActiveCallsStatusResponse]:
        return await self.get(
            "/api/v2/video/active_calls_status", GetActiveCallsStatusResponse
        )

    @telemetry.operation_name("getstream.api.video.query_user_feedback")
    async def query_user_feedback(
        self,
        full: Optional[bool] = None,
        limit: Optional[int] = None,
        next: Optional[str] = None,
        prev: Optional[str] = None,
        sort: Optional[List[SortParamRequest]] = None,
        filter_conditions: Optional[Dict[str, object]] = None,
    ) -> StreamResponse[QueryUserFeedbackResponse]:
        query_params = build_query_param(full=full)
        json = build_body_dict(
            limit=limit,
            next=next,
            prev=prev,
            sort=sort,
            filter_conditions=filter_conditions,
        )
        return await self.post(
            "/api/v2/video/call/feedback",
            QueryUserFeedbackResponse,
            query_params=query_params,
            json=json,
        )

    @telemetry.operation_name("getstream.api.video.query_call_members")
    async def query_call_members(
        self,
        id: str,
        type: str,
        limit: Optional[int] = None,
        next: Optional[str] = None,
        prev: Optional[str] = None,
        sort: Optional[List[SortParamRequest]] = None,
        filter_conditions: Optional[Dict[str, object]] = None,
    ) -> StreamResponse[QueryCallMembersResponse]:
        json = build_body_dict(
            id=id,
            type=type,
            limit=limit,
            next=next,
            prev=prev,
            sort=sort,
            filter_conditions=filter_conditions,
        )
        return await self.post(
            "/api/v2/video/call/members", QueryCallMembersResponse, json=json
        )

    @telemetry.operation_name("getstream.api.video.query_call_stats")
    async def query_call_stats(
        self,
        limit: Optional[int] = None,
        next: Optional[str] = None,
        prev: Optional[str] = None,
        sort: Optional[List[SortParamRequest]] = None,
        filter_conditions: Optional[Dict[str, object]] = None,
    ) -> StreamResponse[QueryCallStatsResponse]:
        json = build_body_dict(
            limit=limit,
            next=next,
            prev=prev,
            sort=sort,
            filter_conditions=filter_conditions,
        )
        return await self.post(
            "/api/v2/video/call/stats", QueryCallStatsResponse, json=json
        )

    @telemetry.operation_name("getstream.api.video.get_call")
    async def get_call(
        self,
        type: str,
        id: str,
        members_limit: Optional[int] = None,
        ring: Optional[bool] = None,
        notify: Optional[bool] = None,
        video: Optional[bool] = None,
    ) -> StreamResponse[GetCallResponse]:
        query_params = build_query_param(
            members_limit=members_limit, ring=ring, notify=notify, video=video
        )
        path_params = {
            "type": type,
            "id": id,
        }
        return await self.get(
            "/api/v2/video/call/{type}/{id}",
            GetCallResponse,
            query_params=query_params,
            path_params=path_params,
        )

    @telemetry.operation_name("getstream.api.video.update_call")
    async def update_call(
        self,
        type: str,
        id: str,
        starts_at: Optional[datetime] = None,
        custom: Optional[Dict[str, object]] = None,
        settings_override: Optional[CallSettingsRequest] = None,
    ) -> StreamResponse[UpdateCallResponse]:
        path_params = {
            "type": type,
            "id": id,
        }
        json = build_body_dict(
            starts_at=starts_at, custom=custom, settings_override=settings_override
        )
        return await self.patch(
            "/api/v2/video/call/{type}/{id}",
            UpdateCallResponse,
            path_params=path_params,
            json=json,
        )

    @telemetry.operation_name("getstream.api.video.get_or_create_call")
    async def get_or_create_call(
        self,
        type: str,
        id: str,
        members_limit: Optional[int] = None,
        notify: Optional[bool] = None,
        ring: Optional[bool] = None,
        video: Optional[bool] = None,
        data: Optional[CallRequest] = None,
    ) -> StreamResponse[GetOrCreateCallResponse]:
        path_params = {
            "type": type,
            "id": id,
        }
        json = build_body_dict(
            members_limit=members_limit,
            notify=notify,
            ring=ring,
            video=video,
            data=data,
        )
        return await self.post(
            "/api/v2/video/call/{type}/{id}",
            GetOrCreateCallResponse,
            path_params=path_params,
            json=json,
        )

    @telemetry.operation_name("getstream.api.video.block_user")
    async def block_user(
        self, type: str, id: str, user_id: str
    ) -> StreamResponse[BlockUserResponse]:
        path_params = {
            "type": type,
            "id": id,
        }
        json = build_body_dict(user_id=user_id)
        return await self.post(
            "/api/v2/video/call/{type}/{id}/block",
            BlockUserResponse,
            path_params=path_params,
            json=json,
        )

    @telemetry.operation_name("getstream.api.video.send_closed_caption")
    async def send_closed_caption(
        self,
        type: str,
        id: str,
        speaker_id: str,
        text: str,
        end_time: Optional[datetime] = None,
        language: Optional[str] = None,
        service: Optional[str] = None,
        start_time: Optional[datetime] = None,
        translated: Optional[bool] = None,
        user_id: Optional[str] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[SendClosedCaptionResponse]:
        path_params = {
            "type": type,
            "id": id,
        }
        json = build_body_dict(
            speaker_id=speaker_id,
            text=text,
            end_time=end_time,
            language=language,
            service=service,
            start_time=start_time,
            translated=translated,
            user_id=user_id,
            user=user,
        )
        return await self.post(
            "/api/v2/video/call/{type}/{id}/closed_captions",
            SendClosedCaptionResponse,
            path_params=path_params,
            json=json,
        )

    @telemetry.operation_name("getstream.api.video.delete_call")
    async def delete_call(
        self, type: str, id: str, hard: Optional[bool] = None
    ) -> StreamResponse[DeleteCallResponse]:
        path_params = {
            "type": type,
            "id": id,
        }
        json = build_body_dict(hard=hard)
        return await self.post(
            "/api/v2/video/call/{type}/{id}/delete",
            DeleteCallResponse,
            path_params=path_params,
            json=json,
        )

    @telemetry.operation_name("getstream.api.video.send_call_event")
    async def send_call_event(
        self,
        type: str,
        id: str,
        user_id: Optional[str] = None,
        custom: Optional[Dict[str, object]] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[SendCallEventResponse]:
        path_params = {
            "type": type,
            "id": id,
        }
        json = build_body_dict(user_id=user_id, custom=custom, user=user)
        return await self.post(
            "/api/v2/video/call/{type}/{id}/event",
            SendCallEventResponse,
            path_params=path_params,
            json=json,
        )

    @telemetry.operation_name("getstream.api.video.collect_user_feedback")
    async def collect_user_feedback(
        self,
        type: str,
        id: str,
        rating: int,
        sdk: str,
        sdk_version: str,
        reason: Optional[str] = None,
        user_session_id: Optional[str] = None,
        custom: Optional[Dict[str, object]] = None,
    ) -> StreamResponse[CollectUserFeedbackResponse]:
        path_params = {
            "type": type,
            "id": id,
        }
        json = build_body_dict(
            rating=rating,
            sdk=sdk,
            sdk_version=sdk_version,
            reason=reason,
            user_session_id=user_session_id,
            custom=custom,
        )
        return await self.post(
            "/api/v2/video/call/{type}/{id}/feedback",
            CollectUserFeedbackResponse,
            path_params=path_params,
            json=json,
        )

    @telemetry.operation_name("getstream.api.video.go_live")
    async def go_live(
        self,
        type: str,
        id: str,
        recording_storage_name: Optional[str] = None,
        start_closed_caption: Optional[bool] = None,
        start_hls: Optional[bool] = None,
        start_recording: Optional[bool] = None,
        start_transcription: Optional[bool] = None,
        transcription_storage_name: Optional[str] = None,
    ) -> StreamResponse[GoLiveResponse]:
        path_params = {
            "type": type,
            "id": id,
        }
        json = build_body_dict(
            recording_storage_name=recording_storage_name,
            start_closed_caption=start_closed_caption,
            start_hls=start_hls,
            start_recording=start_recording,
            start_transcription=start_transcription,
            transcription_storage_name=transcription_storage_name,
        )
        return await self.post(
            "/api/v2/video/call/{type}/{id}/go_live",
            GoLiveResponse,
            path_params=path_params,
            json=json,
        )

    @telemetry.operation_name("getstream.api.video.kick_user")
    async def kick_user(
        self,
        type: str,
        id: str,
        user_id: str,
        block: Optional[bool] = None,
        kicked_by_id: Optional[str] = None,
        kicked_by: Optional[UserRequest] = None,
    ) -> StreamResponse[KickUserResponse]:
        path_params = {
            "type": type,
            "id": id,
        }
        json = build_body_dict(
            user_id=user_id, block=block, kicked_by_id=kicked_by_id, kicked_by=kicked_by
        )
        return await self.post(
            "/api/v2/video/call/{type}/{id}/kick",
            KickUserResponse,
            path_params=path_params,
            json=json,
        )

    @telemetry.operation_name("getstream.api.video.end_call")
    async def end_call(self, type: str, id: str) -> StreamResponse[EndCallResponse]:
        path_params = {
            "type": type,
            "id": id,
        }
        return await self.post(
            "/api/v2/video/call/{type}/{id}/mark_ended",
            EndCallResponse,
            path_params=path_params,
        )

    @telemetry.operation_name("getstream.api.video.update_call_members")
    async def update_call_members(
        self,
        type: str,
        id: str,
        remove_members: Optional[List[str]] = None,
        update_members: Optional[List[MemberRequest]] = None,
    ) -> StreamResponse[UpdateCallMembersResponse]:
        path_params = {
            "type": type,
            "id": id,
        }
        json = build_body_dict(
            remove_members=remove_members, update_members=update_members
        )
        return await self.post(
            "/api/v2/video/call/{type}/{id}/members",
            UpdateCallMembersResponse,
            path_params=path_params,
            json=json,
        )

    @telemetry.operation_name("getstream.api.video.mute_users")
    async def mute_users(
        self,
        type: str,
        id: str,
        audio: Optional[bool] = None,
        mute_all_users: Optional[bool] = None,
        muted_by_id: Optional[str] = None,
        screenshare: Optional[bool] = None,
        screenshare_audio: Optional[bool] = None,
        video: Optional[bool] = None,
        user_ids: Optional[List[str]] = None,
        muted_by: Optional[UserRequest] = None,
    ) -> StreamResponse[MuteUsersResponse]:
        path_params = {
            "type": type,
            "id": id,
        }
        json = build_body_dict(
            audio=audio,
            mute_all_users=mute_all_users,
            muted_by_id=muted_by_id,
            screenshare=screenshare,
            screenshare_audio=screenshare_audio,
            video=video,
            user_ids=user_ids,
            muted_by=muted_by,
        )
        return await self.post(
            "/api/v2/video/call/{type}/{id}/mute_users",
            MuteUsersResponse,
            path_params=path_params,
            json=json,
        )

    @telemetry.operation_name("getstream.api.video.query_call_participants")
    async def query_call_participants(
        self,
        id: str,
        type: str,
        limit: Optional[int] = None,
        filter_conditions: Optional[Dict[str, object]] = None,
    ) -> StreamResponse[QueryCallParticipantsResponse]:
        query_params = build_query_param(limit=limit)
        path_params = {
            "id": id,
            "type": type,
        }
        json = build_body_dict(filter_conditions=filter_conditions)
        return await self.post(
            "/api/v2/video/call/{type}/{id}/participants",
            QueryCallParticipantsResponse,
            query_params=query_params,
            path_params=path_params,
            json=json,
        )

    @telemetry.operation_name("getstream.api.video.video_pin")
    async def video_pin(
        self, type: str, id: str, session_id: str, user_id: str
    ) -> StreamResponse[PinResponse]:
        path_params = {
            "type": type,
            "id": id,
        }
        json = build_body_dict(session_id=session_id, user_id=user_id)
        return await self.post(
            "/api/v2/video/call/{type}/{id}/pin",
            PinResponse,
            path_params=path_params,
            json=json,
        )

    @telemetry.operation_name("getstream.api.video.list_recordings")
    async def list_recordings(
        self, type: str, id: str
    ) -> StreamResponse[ListRecordingsResponse]:
        path_params = {
            "type": type,
            "id": id,
        }
        return await self.get(
            "/api/v2/video/call/{type}/{id}/recordings",
            ListRecordingsResponse,
            path_params=path_params,
        )

    @telemetry.operation_name("getstream.api.video.get_call_report")
    async def get_call_report(
        self, type: str, id: str, session_id: Optional[str] = None
    ) -> StreamResponse[GetCallReportResponse]:
        query_params = build_query_param(session_id=session_id)
        path_params = {
            "type": type,
            "id": id,
        }
        return await self.get(
            "/api/v2/video/call/{type}/{id}/report",
            GetCallReportResponse,
            query_params=query_params,
            path_params=path_params,
        )

    @telemetry.operation_name("getstream.api.video.start_rtmp_broadcasts")
    async def start_rtmp_broadcasts(
        self, type: str, id: str, broadcasts: List[RTMPBroadcastRequest]
    ) -> StreamResponse[StartRTMPBroadcastsResponse]:
        path_params = {
            "type": type,
            "id": id,
        }
        json = build_body_dict(broadcasts=broadcasts)
        return await self.post(
            "/api/v2/video/call/{type}/{id}/rtmp_broadcasts",
            StartRTMPBroadcastsResponse,
            path_params=path_params,
            json=json,
        )

    @telemetry.operation_name("getstream.api.video.stop_all_rtmp_broadcasts")
    async def stop_all_rtmp_broadcasts(
        self, type: str, id: str
    ) -> StreamResponse[StopAllRTMPBroadcastsResponse]:
        path_params = {
            "type": type,
            "id": id,
        }
        return await self.post(
            "/api/v2/video/call/{type}/{id}/rtmp_broadcasts/stop",
            StopAllRTMPBroadcastsResponse,
            path_params=path_params,
        )

    @telemetry.operation_name("getstream.api.video.stop_rtmp_broadcast")
    async def stop_rtmp_broadcast(
        self,
        type: str,
        id: str,
        name: str,
    ) -> StreamResponse[StopRTMPBroadcastsResponse]:
        path_params = {
            "type": type,
            "id": id,
            "name": name,
        }
        json = build_body_dict()
        return await self.post(
            "/api/v2/video/call/{type}/{id}/rtmp_broadcasts/{name}/stop",
            StopRTMPBroadcastsResponse,
            path_params=path_params,
            json=json,
        )

    @telemetry.operation_name("getstream.api.video.start_hls_broadcasting")
    async def start_hls_broadcasting(
        self, type: str, id: str
    ) -> StreamResponse[StartHLSBroadcastingResponse]:
        path_params = {
            "type": type,
            "id": id,
        }
        return await self.post(
            "/api/v2/video/call/{type}/{id}/start_broadcasting",
            StartHLSBroadcastingResponse,
            path_params=path_params,
        )

    @telemetry.operation_name("getstream.api.video.start_closed_captions")
    async def start_closed_captions(
        self,
        type: str,
        id: str,
        enable_transcription: Optional[bool] = None,
        external_storage: Optional[str] = None,
        language: Optional[str] = None,
        speech_segment_config: Optional[SpeechSegmentConfig] = None,
    ) -> StreamResponse[StartClosedCaptionsResponse]:
        path_params = {
            "type": type,
            "id": id,
        }
        json = build_body_dict(
            enable_transcription=enable_transcription,
            external_storage=external_storage,
            language=language,
            speech_segment_config=speech_segment_config,
        )
        return await self.post(
            "/api/v2/video/call/{type}/{id}/start_closed_captions",
            StartClosedCaptionsResponse,
            path_params=path_params,
            json=json,
        )

    @telemetry.operation_name("getstream.api.video.start_frame_recording")
    async def start_frame_recording(
        self, type: str, id: str, recording_external_storage: Optional[str] = None
    ) -> StreamResponse[StartFrameRecordingResponse]:
        path_params = {
            "type": type,
            "id": id,
        }
        json = build_body_dict(recording_external_storage=recording_external_storage)
        return await self.post(
            "/api/v2/video/call/{type}/{id}/start_frame_recording",
            StartFrameRecordingResponse,
            path_params=path_params,
            json=json,
        )

    @telemetry.operation_name("getstream.api.video.start_recording")
    async def start_recording(
        self, type: str, id: str, recording_external_storage: Optional[str] = None
    ) -> StreamResponse[StartRecordingResponse]:
        path_params = {
            "type": type,
            "id": id,
        }
        json = build_body_dict(recording_external_storage=recording_external_storage)
        return await self.post(
            "/api/v2/video/call/{type}/{id}/start_recording",
            StartRecordingResponse,
            path_params=path_params,
            json=json,
        )

    @telemetry.operation_name("getstream.api.video.start_transcription")
    async def start_transcription(
        self,
        type: str,
        id: str,
        enable_closed_captions: Optional[bool] = None,
        language: Optional[str] = None,
        transcription_external_storage: Optional[str] = None,
    ) -> StreamResponse[StartTranscriptionResponse]:
        path_params = {
            "type": type,
            "id": id,
        }
        json = build_body_dict(
            enable_closed_captions=enable_closed_captions,
            language=language,
            transcription_external_storage=transcription_external_storage,
        )
        return await self.post(
            "/api/v2/video/call/{type}/{id}/start_transcription",
            StartTranscriptionResponse,
            path_params=path_params,
            json=json,
        )

    @telemetry.operation_name("getstream.api.video.stop_hls_broadcasting")
    async def stop_hls_broadcasting(
        self, type: str, id: str
    ) -> StreamResponse[StopHLSBroadcastingResponse]:
        path_params = {
            "type": type,
            "id": id,
        }
        return await self.post(
            "/api/v2/video/call/{type}/{id}/stop_broadcasting",
            StopHLSBroadcastingResponse,
            path_params=path_params,
        )

    @telemetry.operation_name("getstream.api.video.stop_closed_captions")
    async def stop_closed_captions(
        self, type: str, id: str, stop_transcription: Optional[bool] = None
    ) -> StreamResponse[StopClosedCaptionsResponse]:
        path_params = {
            "type": type,
            "id": id,
        }
        json = build_body_dict(stop_transcription=stop_transcription)
        return await self.post(
            "/api/v2/video/call/{type}/{id}/stop_closed_captions",
            StopClosedCaptionsResponse,
            path_params=path_params,
            json=json,
        )

    @telemetry.operation_name("getstream.api.video.stop_frame_recording")
    async def stop_frame_recording(
        self, type: str, id: str
    ) -> StreamResponse[StopFrameRecordingResponse]:
        path_params = {
            "type": type,
            "id": id,
        }
        return await self.post(
            "/api/v2/video/call/{type}/{id}/stop_frame_recording",
            StopFrameRecordingResponse,
            path_params=path_params,
        )

    @telemetry.operation_name("getstream.api.video.stop_live")
    async def stop_live(
        self,
        type: str,
        id: str,
        continue_closed_caption: Optional[bool] = None,
        continue_hls: Optional[bool] = None,
        continue_recording: Optional[bool] = None,
        continue_rtmp_broadcasts: Optional[bool] = None,
        continue_transcription: Optional[bool] = None,
    ) -> StreamResponse[StopLiveResponse]:
        path_params = {
            "type": type,
            "id": id,
        }
        json = build_body_dict(
            continue_closed_caption=continue_closed_caption,
            continue_hls=continue_hls,
            continue_recording=continue_recording,
            continue_rtmp_broadcasts=continue_rtmp_broadcasts,
            continue_transcription=continue_transcription,
        )
        return await self.post(
            "/api/v2/video/call/{type}/{id}/stop_live",
            StopLiveResponse,
            path_params=path_params,
            json=json,
        )

    @telemetry.operation_name("getstream.api.video.stop_recording")
    async def stop_recording(
        self, type: str, id: str
    ) -> StreamResponse[StopRecordingResponse]:
        path_params = {
            "type": type,
            "id": id,
        }
        return await self.post(
            "/api/v2/video/call/{type}/{id}/stop_recording",
            StopRecordingResponse,
            path_params=path_params,
        )

    @telemetry.operation_name("getstream.api.video.stop_transcription")
    async def stop_transcription(
        self, type: str, id: str, stop_closed_captions: Optional[bool] = None
    ) -> StreamResponse[StopTranscriptionResponse]:
        path_params = {
            "type": type,
            "id": id,
        }
        json = build_body_dict(stop_closed_captions=stop_closed_captions)
        return await self.post(
            "/api/v2/video/call/{type}/{id}/stop_transcription",
            StopTranscriptionResponse,
            path_params=path_params,
            json=json,
        )

    @telemetry.operation_name("getstream.api.video.list_transcriptions")
    async def list_transcriptions(
        self, type: str, id: str
    ) -> StreamResponse[ListTranscriptionsResponse]:
        path_params = {
            "type": type,
            "id": id,
        }
        return await self.get(
            "/api/v2/video/call/{type}/{id}/transcriptions",
            ListTranscriptionsResponse,
            path_params=path_params,
        )

    @telemetry.operation_name("getstream.api.video.unblock_user")
    async def unblock_user(
        self, type: str, id: str, user_id: str
    ) -> StreamResponse[UnblockUserResponse]:
        path_params = {
            "type": type,
            "id": id,
        }
        json = build_body_dict(user_id=user_id)
        return await self.post(
            "/api/v2/video/call/{type}/{id}/unblock",
            UnblockUserResponse,
            path_params=path_params,
            json=json,
        )

    @telemetry.operation_name("getstream.api.video.video_unpin")
    async def video_unpin(
        self, type: str, id: str, session_id: str, user_id: str
    ) -> StreamResponse[UnpinResponse]:
        path_params = {
            "type": type,
            "id": id,
        }
        json = build_body_dict(session_id=session_id, user_id=user_id)
        return await self.post(
            "/api/v2/video/call/{type}/{id}/unpin",
            UnpinResponse,
            path_params=path_params,
            json=json,
        )

    @telemetry.operation_name("getstream.api.video.update_user_permissions")
    async def update_user_permissions(
        self,
        type: str,
        id: str,
        user_id: str,
        grant_permissions: Optional[List[str]] = None,
        revoke_permissions: Optional[List[str]] = None,
    ) -> StreamResponse[UpdateUserPermissionsResponse]:
        path_params = {
            "type": type,
            "id": id,
        }
        json = build_body_dict(
            user_id=user_id,
            grant_permissions=grant_permissions,
            revoke_permissions=revoke_permissions,
        )
        return await self.post(
            "/api/v2/video/call/{type}/{id}/user_permissions",
            UpdateUserPermissionsResponse,
            path_params=path_params,
            json=json,
        )

    @telemetry.operation_name("getstream.api.video.delete_recording")
    async def delete_recording(
        self, type: str, id: str, session: str, filename: str
    ) -> StreamResponse[DeleteRecordingResponse]:
        path_params = {
            "type": type,
            "id": id,
            "session": session,
            "filename": filename,
        }
        return await self.delete(
            "/api/v2/video/call/{type}/{id}/{session}/recordings/{filename}",
            DeleteRecordingResponse,
            path_params=path_params,
        )

    @telemetry.operation_name("getstream.api.video.delete_transcription")
    async def delete_transcription(
        self, type: str, id: str, session: str, filename: str
    ) -> StreamResponse[DeleteTranscriptionResponse]:
        path_params = {
            "type": type,
            "id": id,
            "session": session,
            "filename": filename,
        }
        return await self.delete(
            "/api/v2/video/call/{type}/{id}/{session}/transcriptions/{filename}",
            DeleteTranscriptionResponse,
            path_params=path_params,
        )

    @telemetry.operation_name(
        "getstream.api.video.get_call_session_participant_stats_details"
    )
    async def get_call_session_participant_stats_details(
        self,
        call_type: str,
        call_id: str,
        session: str,
        user: str,
        user_session: str,
        metrics: Optional[str] = None,
        since: Optional[str] = None,
        until: Optional[str] = None,
        step: Optional[int] = None,
        max_points: Optional[int] = None,
        track_type: Optional[str] = None,
        remote_user_id: Optional[str] = None,
        remote_user_session_id: Optional[str] = None,
    ) -> StreamResponse[GetCallSessionParticipantStatsDetailsResponse]:
        query_params = build_query_param(
            metrics=metrics,
            since=since,
            until=until,
            step=step,
            max_points=max_points,
            track_type=track_type,
            remote_user_id=remote_user_id,
            remote_user_session_id=remote_user_session_id,
        )
        path_params = {
            "call_type": call_type,
            "call_id": call_id,
            "session": session,
            "user": user,
            "user_session": user_session,
        }
        return await self.get(
            "/api/v2/video/call_stats/{call_type}/{call_id}/{session}/participant/{user}/{user_session}/details",
            GetCallSessionParticipantStatsDetailsResponse,
            query_params=query_params,
            path_params=path_params,
        )

    @telemetry.operation_name(
        "getstream.api.video.query_call_session_participant_stats"
    )
    async def query_call_session_participant_stats(
        self,
        call_type: str,
        call_id: str,
        session: str,
        sort: Optional[List[SortParamRequest]] = None,
        filter_conditions: Optional[Dict[str, object]] = None,
    ) -> StreamResponse[QueryCallSessionParticipantStatsResponse]:
        query_params = build_query_param(sort=sort, filter_conditions=filter_conditions)
        path_params = {
            "call_type": call_type,
            "call_id": call_id,
            "session": session,
        }
        return await self.get(
            "/api/v2/video/call_stats/{call_type}/{call_id}/{session}/participants",
            QueryCallSessionParticipantStatsResponse,
            query_params=query_params,
            path_params=path_params,
        )

    @telemetry.operation_name("getstream.api.video.query_calls")
    async def query_calls(
        self,
        limit: Optional[int] = None,
        next: Optional[str] = None,
        prev: Optional[str] = None,
        sort: Optional[List[SortParamRequest]] = None,
        filter_conditions: Optional[Dict[str, object]] = None,
    ) -> StreamResponse[QueryCallsResponse]:
        json = build_body_dict(
            limit=limit,
            next=next,
            prev=prev,
            sort=sort,
            filter_conditions=filter_conditions,
        )
        return await self.post("/api/v2/video/calls", QueryCallsResponse, json=json)

    @telemetry.operation_name("getstream.api.video.list_call_types")
    async def list_call_types(self) -> StreamResponse[ListCallTypeResponse]:
        return await self.get("/api/v2/video/calltypes", ListCallTypeResponse)

    @telemetry.operation_name("getstream.api.video.create_call_type")
    async def create_call_type(
        self,
        name: str,
        external_storage: Optional[str] = None,
        grants: Optional[Dict[str, List[str]]] = None,
        notification_settings: Optional[NotificationSettings] = None,
        settings: Optional[CallSettingsRequest] = None,
    ) -> StreamResponse[CreateCallTypeResponse]:
        json = build_body_dict(
            name=name,
            external_storage=external_storage,
            grants=grants,
            notification_settings=notification_settings,
            settings=settings,
        )
        return await self.post(
            "/api/v2/video/calltypes", CreateCallTypeResponse, json=json
        )

    @telemetry.operation_name("getstream.api.video.delete_call_type")
    async def delete_call_type(self, name: str) -> StreamResponse[Response]:
        path_params = {
            "name": name,
        }
        return await self.delete(
            "/api/v2/video/calltypes/{name}", Response, path_params=path_params
        )

    @telemetry.operation_name("getstream.api.video.get_call_type")
    async def get_call_type(self, name: str) -> StreamResponse[GetCallTypeResponse]:
        path_params = {
            "name": name,
        }
        return await self.get(
            "/api/v2/video/calltypes/{name}",
            GetCallTypeResponse,
            path_params=path_params,
        )

    @telemetry.operation_name("getstream.api.video.update_call_type")
    async def update_call_type(
        self,
        name: str,
        external_storage: Optional[str] = None,
        grants: Optional[Dict[str, List[str]]] = None,
        notification_settings: Optional[NotificationSettings] = None,
        settings: Optional[CallSettingsRequest] = None,
    ) -> StreamResponse[UpdateCallTypeResponse]:
        path_params = {
            "name": name,
        }
        json = build_body_dict(
            external_storage=external_storage,
            grants=grants,
            notification_settings=notification_settings,
            settings=settings,
        )
        return await self.put(
            "/api/v2/video/calltypes/{name}",
            UpdateCallTypeResponse,
            path_params=path_params,
            json=json,
        )

    @telemetry.operation_name("getstream.api.video.get_edges")
    async def get_edges(self) -> StreamResponse[GetEdgesResponse]:
        return await self.get("/api/v2/video/edges", GetEdgesResponse)

    @telemetry.operation_name("getstream.api.video.query_aggregate_call_stats")
    async def query_aggregate_call_stats(
        self,
        _from: Optional[str] = None,
        to: Optional[str] = None,
        report_types: Optional[List[str]] = None,
    ) -> StreamResponse[QueryAggregateCallStatsResponse]:
        json = build_body_dict(_from=_from, to=to, report_types=report_types)
        return await self.post(
            "/api/v2/video/stats", QueryAggregateCallStatsResponse, json=json
        )
