# Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.
from getstream.base import BaseClient
from getstream.models import *
from getstream.stream_response import StreamResponse
from getstream.utils import build_query_param, build_body_dict


class FeedsRestClient(BaseClient):
    def __init__(self, api_key: str, base_url: str, timeout: float, token: str):
        """
        Initializes FeedsClient with BaseClient instance
        :param api_key: A string representing the client's API key
        :param base_url: A string representing the base uniform resource locator
        :param timeout: A number representing the time limit for a request
        :param token: A string instance representing the client's token
        """
        super().__init__(
            api_key=api_key,
            base_url=base_url,
            timeout=timeout,
            token=token,
        )

    def add_activity(
        self,
        type: str,
        feeds: List[str],
        expires_at: Optional[str] = None,
        id: Optional[str] = None,
        parent_id: Optional[str] = None,
        poll_id: Optional[str] = None,
        text: Optional[str] = None,
        user_id: Optional[str] = None,
        visibility: Optional[str] = None,
        visibility_tag: Optional[str] = None,
        attachments: Optional[List[Attachment]] = None,
        filter_tags: Optional[List[str]] = None,
        interest_tags: Optional[List[str]] = None,
        mentioned_user_ids: Optional[List[str]] = None,
        custom: Optional[Dict[str, object]] = None,
        location: Optional[ActivityLocation] = None,
        search_data: Optional[Dict[str, object]] = None,
    ) -> StreamResponse[AddActivityResponse]:
        json = build_body_dict(
            type=type,
            feeds=feeds,
            expires_at=expires_at,
            id=id,
            parent_id=parent_id,
            poll_id=poll_id,
            text=text,
            user_id=user_id,
            visibility=visibility,
            visibility_tag=visibility_tag,
            attachments=attachments,
            filter_tags=filter_tags,
            interest_tags=interest_tags,
            mentioned_user_ids=mentioned_user_ids,
            custom=custom,
            location=location,
            search_data=search_data,
        )

        return self.post("/api/v2/feeds/activities", AddActivityResponse, json=json)

    def upsert_activities(
        self, activities: List[ActivityRequest]
    ) -> StreamResponse[UpsertActivitiesResponse]:
        json = build_body_dict(activities=activities)

        return self.post(
            "/api/v2/feeds/activities/batch", UpsertActivitiesResponse, json=json
        )

    def delete_activities(
        self,
        ids: List[str],
        hard_delete: Optional[bool] = None,
        user_id: Optional[str] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[DeleteActivitiesResponse]:
        json = build_body_dict(
            ids=ids, hard_delete=hard_delete, user_id=user_id, user=user
        )

        return self.post(
            "/api/v2/feeds/activities/delete", DeleteActivitiesResponse, json=json
        )

    def query_activities(
        self,
        limit: Optional[int] = None,
        next: Optional[str] = None,
        prev: Optional[str] = None,
        sort: Optional[List[SortParamRequest]] = None,
        filter: Optional[Dict[str, object]] = None,
    ) -> StreamResponse[QueryActivitiesResponse]:
        json = build_body_dict(
            limit=limit, next=next, prev=prev, sort=sort, filter=filter
        )

        return self.post(
            "/api/v2/feeds/activities/query", QueryActivitiesResponse, json=json
        )

    def delete_bookmark(
        self,
        activity_id: str,
        folder_id: Optional[str] = None,
        user_id: Optional[str] = None,
    ) -> StreamResponse[DeleteBookmarkResponse]:
        query_params = build_query_param(folder_id=folder_id, user_id=user_id)
        path_params = {
            "activity_id": activity_id,
        }

        return self.delete(
            "/api/v2/feeds/activities/{activity_id}/bookmarks",
            DeleteBookmarkResponse,
            query_params=query_params,
            path_params=path_params,
        )

    def update_bookmark(
        self,
        activity_id: str,
        folder_id: Optional[str] = None,
        new_folder_id: Optional[str] = None,
        user_id: Optional[str] = None,
        custom: Optional[Dict[str, object]] = None,
        new_folder: Optional[AddFolderRequest] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[UpdateBookmarkResponse]:
        path_params = {
            "activity_id": activity_id,
        }
        json = build_body_dict(
            folder_id=folder_id,
            new_folder_id=new_folder_id,
            user_id=user_id,
            custom=custom,
            new_folder=new_folder,
            user=user,
        )

        return self.patch(
            "/api/v2/feeds/activities/{activity_id}/bookmarks",
            UpdateBookmarkResponse,
            path_params=path_params,
            json=json,
        )

    def add_bookmark(
        self,
        activity_id: str,
        folder_id: Optional[str] = None,
        user_id: Optional[str] = None,
        custom: Optional[Dict[str, object]] = None,
        new_folder: Optional[AddFolderRequest] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[AddBookmarkResponse]:
        path_params = {
            "activity_id": activity_id,
        }
        json = build_body_dict(
            folder_id=folder_id,
            user_id=user_id,
            custom=custom,
            new_folder=new_folder,
            user=user,
        )

        return self.post(
            "/api/v2/feeds/activities/{activity_id}/bookmarks",
            AddBookmarkResponse,
            path_params=path_params,
            json=json,
        )

    def activity_feedback(
        self,
        activity_id: str,
        hide: Optional[bool] = None,
        mute_user: Optional[bool] = None,
        reason: Optional[str] = None,
        report: Optional[bool] = None,
        show_less: Optional[bool] = None,
        user_id: Optional[str] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[ActivityFeedbackResponse]:
        path_params = {
            "activity_id": activity_id,
        }
        json = build_body_dict(
            hide=hide,
            mute_user=mute_user,
            reason=reason,
            report=report,
            show_less=show_less,
            user_id=user_id,
            user=user,
        )

        return self.post(
            "/api/v2/feeds/activities/{activity_id}/feedback",
            ActivityFeedbackResponse,
            path_params=path_params,
            json=json,
        )

    def cast_poll_vote(
        self,
        activity_id: str,
        poll_id: str,
        user_id: Optional[str] = None,
        user: Optional[UserRequest] = None,
        vote: Optional[VoteData] = None,
    ) -> StreamResponse[PollVoteResponse]:
        path_params = {
            "activity_id": activity_id,
            "poll_id": poll_id,
        }
        json = build_body_dict(user_id=user_id, user=user, vote=vote)

        return self.post(
            "/api/v2/feeds/activities/{activity_id}/polls/{poll_id}/vote",
            PollVoteResponse,
            path_params=path_params,
            json=json,
        )

    def delete_poll_vote(
        self,
        activity_id: str,
        poll_id: str,
        vote_id: str,
        user_id: Optional[str] = None,
    ) -> StreamResponse[PollVoteResponse]:
        query_params = build_query_param(user_id=user_id)
        path_params = {
            "activity_id": activity_id,
            "poll_id": poll_id,
            "vote_id": vote_id,
        }

        return self.delete(
            "/api/v2/feeds/activities/{activity_id}/polls/{poll_id}/vote/{vote_id}",
            PollVoteResponse,
            query_params=query_params,
            path_params=path_params,
        )

    def add_reaction(
        self,
        activity_id: str,
        type: str,
        create_notification_activity: Optional[bool] = None,
        skip_push: Optional[bool] = None,
        user_id: Optional[str] = None,
        custom: Optional[Dict[str, object]] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[AddReactionResponse]:
        path_params = {
            "activity_id": activity_id,
        }
        json = build_body_dict(
            type=type,
            create_notification_activity=create_notification_activity,
            skip_push=skip_push,
            user_id=user_id,
            custom=custom,
            user=user,
        )

        return self.post(
            "/api/v2/feeds/activities/{activity_id}/reactions",
            AddReactionResponse,
            path_params=path_params,
            json=json,
        )

    def query_activity_reactions(
        self,
        activity_id: str,
        limit: Optional[int] = None,
        next: Optional[str] = None,
        prev: Optional[str] = None,
        sort: Optional[List[SortParamRequest]] = None,
        filter: Optional[Dict[str, object]] = None,
    ) -> StreamResponse[QueryActivityReactionsResponse]:
        path_params = {
            "activity_id": activity_id,
        }
        json = build_body_dict(
            limit=limit, next=next, prev=prev, sort=sort, filter=filter
        )

        return self.post(
            "/api/v2/feeds/activities/{activity_id}/reactions/query",
            QueryActivityReactionsResponse,
            path_params=path_params,
            json=json,
        )

    def delete_activity_reaction(
        self, activity_id: str, type: str, user_id: Optional[str] = None
    ) -> StreamResponse[DeleteActivityReactionResponse]:
        query_params = build_query_param(user_id=user_id)
        path_params = {
            "activity_id": activity_id,
            "type": type,
        }

        return self.delete(
            "/api/v2/feeds/activities/{activity_id}/reactions/{type}",
            DeleteActivityReactionResponse,
            query_params=query_params,
            path_params=path_params,
        )

    def delete_activity(
        self, id: str, hard_delete: Optional[bool] = None
    ) -> StreamResponse[DeleteActivityResponse]:
        query_params = build_query_param(hard_delete=hard_delete)
        path_params = {
            "id": id,
        }

        return self.delete(
            "/api/v2/feeds/activities/{id}",
            DeleteActivityResponse,
            query_params=query_params,
            path_params=path_params,
        )

    def get_activity(self, id: str) -> StreamResponse[GetActivityResponse]:
        path_params = {
            "id": id,
        }

        return self.get(
            "/api/v2/feeds/activities/{id}",
            GetActivityResponse,
            path_params=path_params,
        )

    def update_activity_partial(
        self,
        id: str,
        user_id: Optional[str] = None,
        unset: Optional[List[str]] = None,
        set: Optional[Dict[str, object]] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[UpdateActivityPartialResponse]:
        path_params = {
            "id": id,
        }
        json = build_body_dict(user_id=user_id, unset=unset, set=set, user=user)

        return self.patch(
            "/api/v2/feeds/activities/{id}",
            UpdateActivityPartialResponse,
            path_params=path_params,
            json=json,
        )

    def update_activity(
        self,
        id: str,
        expires_at: Optional[datetime] = None,
        poll_id: Optional[str] = None,
        text: Optional[str] = None,
        user_id: Optional[str] = None,
        visibility: Optional[str] = None,
        attachments: Optional[List[Attachment]] = None,
        filter_tags: Optional[List[str]] = None,
        interest_tags: Optional[List[str]] = None,
        custom: Optional[Dict[str, object]] = None,
        location: Optional[ActivityLocation] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[UpdateActivityResponse]:
        path_params = {
            "id": id,
        }
        json = build_body_dict(
            expires_at=expires_at,
            poll_id=poll_id,
            text=text,
            user_id=user_id,
            visibility=visibility,
            attachments=attachments,
            filter_tags=filter_tags,
            interest_tags=interest_tags,
            custom=custom,
            location=location,
            user=user,
        )

        return self.put(
            "/api/v2/feeds/activities/{id}",
            UpdateActivityResponse,
            path_params=path_params,
            json=json,
        )

    def query_bookmark_folders(
        self,
        limit: Optional[int] = None,
        next: Optional[str] = None,
        prev: Optional[str] = None,
        sort: Optional[List[SortParamRequest]] = None,
        filter: Optional[Dict[str, object]] = None,
    ) -> StreamResponse[QueryBookmarkFoldersResponse]:
        json = build_body_dict(
            limit=limit, next=next, prev=prev, sort=sort, filter=filter
        )

        return self.post(
            "/api/v2/feeds/bookmark_folders/query",
            QueryBookmarkFoldersResponse,
            json=json,
        )

    def delete_bookmark_folder(
        self, folder_id: str
    ) -> StreamResponse[DeleteBookmarkFolderResponse]:
        path_params = {
            "folder_id": folder_id,
        }

        return self.delete(
            "/api/v2/feeds/bookmark_folders/{folder_id}",
            DeleteBookmarkFolderResponse,
            path_params=path_params,
        )

    def update_bookmark_folder(
        self,
        folder_id: str,
        name: Optional[str] = None,
        user_id: Optional[str] = None,
        custom: Optional[Dict[str, object]] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[UpdateBookmarkFolderResponse]:
        path_params = {
            "folder_id": folder_id,
        }
        json = build_body_dict(name=name, user_id=user_id, custom=custom, user=user)

        return self.patch(
            "/api/v2/feeds/bookmark_folders/{folder_id}",
            UpdateBookmarkFolderResponse,
            path_params=path_params,
            json=json,
        )

    def query_bookmarks(
        self,
        limit: Optional[int] = None,
        next: Optional[str] = None,
        prev: Optional[str] = None,
        sort: Optional[List[SortParamRequest]] = None,
        filter: Optional[Dict[str, object]] = None,
    ) -> StreamResponse[QueryBookmarksResponse]:
        json = build_body_dict(
            limit=limit, next=next, prev=prev, sort=sort, filter=filter
        )

        return self.post(
            "/api/v2/feeds/bookmarks/query", QueryBookmarksResponse, json=json
        )

    def get_comments(
        self,
        object_id: str,
        object_type: str,
        depth: Optional[int] = None,
        sort: Optional[str] = None,
        replies_limit: Optional[int] = None,
        limit: Optional[int] = None,
        prev: Optional[str] = None,
        next: Optional[str] = None,
    ) -> StreamResponse[GetCommentsResponse]:
        query_params = build_query_param(
            object_id=object_id,
            object_type=object_type,
            depth=depth,
            sort=sort,
            replies_limit=replies_limit,
            limit=limit,
            prev=prev,
            next=next,
        )

        return self.get(
            "/api/v2/feeds/comments", GetCommentsResponse, query_params=query_params
        )

    def add_comment(
        self,
        comment: str,
        object_id: str,
        object_type: str,
        create_notification_activity: Optional[bool] = None,
        parent_id: Optional[str] = None,
        skip_push: Optional[bool] = None,
        user_id: Optional[str] = None,
        attachments: Optional[List[Attachment]] = None,
        mentioned_user_ids: Optional[List[str]] = None,
        custom: Optional[Dict[str, object]] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[AddCommentResponse]:
        json = build_body_dict(
            comment=comment,
            object_id=object_id,
            object_type=object_type,
            create_notification_activity=create_notification_activity,
            parent_id=parent_id,
            skip_push=skip_push,
            user_id=user_id,
            attachments=attachments,
            mentioned_user_ids=mentioned_user_ids,
            custom=custom,
            user=user,
        )

        return self.post("/api/v2/feeds/comments", AddCommentResponse, json=json)

    def add_comments_batch(
        self, comments: List[AddCommentRequest]
    ) -> StreamResponse[AddCommentsBatchResponse]:
        json = build_body_dict(comments=comments)

        return self.post(
            "/api/v2/feeds/comments/batch", AddCommentsBatchResponse, json=json
        )

    def query_comments(
        self,
        filter: Dict[str, object],
        limit: Optional[int] = None,
        next: Optional[str] = None,
        prev: Optional[str] = None,
        sort: Optional[str] = None,
    ) -> StreamResponse[QueryCommentsResponse]:
        json = build_body_dict(
            filter=filter, limit=limit, next=next, prev=prev, sort=sort
        )

        return self.post(
            "/api/v2/feeds/comments/query", QueryCommentsResponse, json=json
        )

    def delete_comment(
        self, id: str, hard_delete: Optional[bool] = None
    ) -> StreamResponse[DeleteCommentResponse]:
        query_params = build_query_param(hard_delete=hard_delete)
        path_params = {
            "id": id,
        }

        return self.delete(
            "/api/v2/feeds/comments/{id}",
            DeleteCommentResponse,
            query_params=query_params,
            path_params=path_params,
        )

    def get_comment(self, id: str) -> StreamResponse[GetCommentResponse]:
        path_params = {
            "id": id,
        }

        return self.get(
            "/api/v2/feeds/comments/{id}", GetCommentResponse, path_params=path_params
        )

    def update_comment(
        self,
        id: str,
        comment: Optional[str] = None,
        skip_push: Optional[bool] = None,
        custom: Optional[Dict[str, object]] = None,
    ) -> StreamResponse[UpdateCommentResponse]:
        path_params = {
            "id": id,
        }
        json = build_body_dict(comment=comment, skip_push=skip_push, custom=custom)

        return self.patch(
            "/api/v2/feeds/comments/{id}",
            UpdateCommentResponse,
            path_params=path_params,
            json=json,
        )

    def add_comment_reaction(
        self,
        id: str,
        type: str,
        create_notification_activity: Optional[bool] = None,
        skip_push: Optional[bool] = None,
        user_id: Optional[str] = None,
        custom: Optional[Dict[str, object]] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[AddCommentReactionResponse]:
        path_params = {
            "id": id,
        }
        json = build_body_dict(
            type=type,
            create_notification_activity=create_notification_activity,
            skip_push=skip_push,
            user_id=user_id,
            custom=custom,
            user=user,
        )

        return self.post(
            "/api/v2/feeds/comments/{id}/reactions",
            AddCommentReactionResponse,
            path_params=path_params,
            json=json,
        )

    def query_comment_reactions(
        self,
        id: str,
        limit: Optional[int] = None,
        next: Optional[str] = None,
        prev: Optional[str] = None,
        sort: Optional[List[SortParamRequest]] = None,
        filter: Optional[Dict[str, object]] = None,
    ) -> StreamResponse[QueryCommentReactionsResponse]:
        path_params = {
            "id": id,
        }
        json = build_body_dict(
            limit=limit, next=next, prev=prev, sort=sort, filter=filter
        )

        return self.post(
            "/api/v2/feeds/comments/{id}/reactions/query",
            QueryCommentReactionsResponse,
            path_params=path_params,
            json=json,
        )

    def delete_comment_reaction(
        self, id: str, type: str, user_id: Optional[str] = None
    ) -> StreamResponse[DeleteCommentReactionResponse]:
        query_params = build_query_param(user_id=user_id)
        path_params = {
            "id": id,
            "type": type,
        }

        return self.delete(
            "/api/v2/feeds/comments/{id}/reactions/{type}",
            DeleteCommentReactionResponse,
            query_params=query_params,
            path_params=path_params,
        )

    def get_comment_replies(
        self,
        id: str,
        depth: Optional[int] = None,
        sort: Optional[str] = None,
        replies_limit: Optional[int] = None,
        limit: Optional[int] = None,
        prev: Optional[str] = None,
        next: Optional[str] = None,
    ) -> StreamResponse[GetCommentRepliesResponse]:
        query_params = build_query_param(
            depth=depth,
            sort=sort,
            replies_limit=replies_limit,
            limit=limit,
            prev=prev,
            next=next,
        )
        path_params = {
            "id": id,
        }

        return self.get(
            "/api/v2/feeds/comments/{id}/replies",
            GetCommentRepliesResponse,
            query_params=query_params,
            path_params=path_params,
        )

    def list_feed_groups(self) -> StreamResponse[ListFeedGroupsResponse]:
        return self.get("/api/v2/feeds/feed_groups", ListFeedGroupsResponse)

    def create_feed_group(
        self,
        id: str,
        default_visibility: Optional[str] = None,
        activity_processors: Optional[List[ActivityProcessorConfig]] = None,
        activity_selectors: Optional[List[ActivitySelectorConfig]] = None,
        aggregation: Optional[AggregationConfig] = None,
        custom: Optional[Dict[str, object]] = None,
        notification: Optional[NotificationConfig] = None,
        push_notification: Optional[PushNotificationConfig] = None,
        ranking: Optional[RankingConfig] = None,
    ) -> StreamResponse[CreateFeedGroupResponse]:
        json = build_body_dict(
            id=id,
            default_visibility=default_visibility,
            activity_processors=activity_processors,
            activity_selectors=activity_selectors,
            aggregation=aggregation,
            custom=custom,
            notification=notification,
            push_notification=push_notification,
            ranking=ranking,
        )

        return self.post(
            "/api/v2/feeds/feed_groups", CreateFeedGroupResponse, json=json
        )

    def delete_feed(
        self, feed_group_id: str, feed_id: str, hard_delete: Optional[bool] = None
    ) -> StreamResponse[DeleteFeedResponse]:
        query_params = build_query_param(hard_delete=hard_delete)
        path_params = {
            "feed_group_id": feed_group_id,
            "feed_id": feed_id,
        }

        return self.delete(
            "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}",
            DeleteFeedResponse,
            query_params=query_params,
            path_params=path_params,
        )

    def get_or_create_feed(
        self,
        feed_group_id: str,
        feed_id: str,
        limit: Optional[int] = None,
        next: Optional[str] = None,
        prev: Optional[str] = None,
        user_id: Optional[str] = None,
        view: Optional[str] = None,
        watch: Optional[bool] = None,
        activity_selector_options: Optional[Dict[str, object]] = None,
        data: Optional[FeedInput] = None,
        external_ranking: Optional[Dict[str, object]] = None,
        filter: Optional[Dict[str, object]] = None,
        followers_pagination: Optional[PagerRequest] = None,
        following_pagination: Optional[PagerRequest] = None,
        interest_weights: Optional[Dict[str, float]] = None,
        member_pagination: Optional[PagerRequest] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[GetOrCreateFeedResponse]:
        path_params = {
            "feed_group_id": feed_group_id,
            "feed_id": feed_id,
        }
        json = build_body_dict(
            limit=limit,
            next=next,
            prev=prev,
            user_id=user_id,
            view=view,
            watch=watch,
            activity_selector_options=activity_selector_options,
            data=data,
            external_ranking=external_ranking,
            filter=filter,
            followers_pagination=followers_pagination,
            following_pagination=following_pagination,
            interest_weights=interest_weights,
            member_pagination=member_pagination,
            user=user,
        )

        return self.post(
            "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}",
            GetOrCreateFeedResponse,
            path_params=path_params,
            json=json,
        )

    def update_feed(
        self,
        feed_group_id: str,
        feed_id: str,
        created_by_id: Optional[str] = None,
        custom: Optional[Dict[str, object]] = None,
    ) -> StreamResponse[UpdateFeedResponse]:
        path_params = {
            "feed_group_id": feed_group_id,
            "feed_id": feed_id,
        }
        json = build_body_dict(created_by_id=created_by_id, custom=custom)

        return self.put(
            "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}",
            UpdateFeedResponse,
            path_params=path_params,
            json=json,
        )

    def mark_activity(
        self,
        feed_group_id: str,
        feed_id: str,
        mark_all_read: Optional[bool] = None,
        mark_all_seen: Optional[bool] = None,
        user_id: Optional[str] = None,
        mark_read: Optional[List[str]] = None,
        mark_seen: Optional[List[str]] = None,
        mark_watched: Optional[List[str]] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[Response]:
        path_params = {
            "feed_group_id": feed_group_id,
            "feed_id": feed_id,
        }
        json = build_body_dict(
            mark_all_read=mark_all_read,
            mark_all_seen=mark_all_seen,
            user_id=user_id,
            mark_read=mark_read,
            mark_seen=mark_seen,
            mark_watched=mark_watched,
            user=user,
        )

        return self.post(
            "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/activities/mark/batch",
            Response,
            path_params=path_params,
            json=json,
        )

    def unpin_activity(
        self,
        feed_group_id: str,
        feed_id: str,
        activity_id: str,
        user_id: Optional[str] = None,
    ) -> StreamResponse[UnpinActivityResponse]:
        query_params = build_query_param(user_id=user_id)
        path_params = {
            "feed_group_id": feed_group_id,
            "feed_id": feed_id,
            "activity_id": activity_id,
        }

        return self.delete(
            "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/activities/{activity_id}/pin",
            UnpinActivityResponse,
            query_params=query_params,
            path_params=path_params,
        )

    def pin_activity(
        self,
        feed_group_id: str,
        feed_id: str,
        activity_id: str,
        user_id: Optional[str] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[PinActivityResponse]:
        path_params = {
            "feed_group_id": feed_group_id,
            "feed_id": feed_id,
            "activity_id": activity_id,
        }
        json = build_body_dict(user_id=user_id, user=user)

        return self.post(
            "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/activities/{activity_id}/pin",
            PinActivityResponse,
            path_params=path_params,
            json=json,
        )

    def update_feed_members(
        self,
        feed_group_id: str,
        feed_id: str,
        operation: str,
        limit: Optional[int] = None,
        next: Optional[str] = None,
        prev: Optional[str] = None,
        members: Optional[List[FeedMemberRequest]] = None,
    ) -> StreamResponse[UpdateFeedMembersResponse]:
        path_params = {
            "feed_group_id": feed_group_id,
            "feed_id": feed_id,
        }
        json = build_body_dict(
            operation=operation, limit=limit, next=next, prev=prev, members=members
        )

        return self.patch(
            "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/members",
            UpdateFeedMembersResponse,
            path_params=path_params,
            json=json,
        )

    def accept_feed_member_invite(
        self,
        feed_id: str,
        feed_group_id: str,
        user_id: Optional[str] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[AcceptFeedMemberInviteResponse]:
        path_params = {
            "feed_id": feed_id,
            "feed_group_id": feed_group_id,
        }
        json = build_body_dict(user_id=user_id, user=user)

        return self.post(
            "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/members/accept",
            AcceptFeedMemberInviteResponse,
            path_params=path_params,
            json=json,
        )

    def query_feed_members(
        self,
        feed_group_id: str,
        feed_id: str,
        limit: Optional[int] = None,
        next: Optional[str] = None,
        prev: Optional[str] = None,
        sort: Optional[List[SortParamRequest]] = None,
        filter: Optional[Dict[str, object]] = None,
    ) -> StreamResponse[QueryFeedMembersResponse]:
        path_params = {
            "feed_group_id": feed_group_id,
            "feed_id": feed_id,
        }
        json = build_body_dict(
            limit=limit, next=next, prev=prev, sort=sort, filter=filter
        )

        return self.post(
            "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/members/query",
            QueryFeedMembersResponse,
            path_params=path_params,
            json=json,
        )

    def reject_feed_member_invite(
        self,
        feed_group_id: str,
        feed_id: str,
        user_id: Optional[str] = None,
        user: Optional[UserRequest] = None,
    ) -> StreamResponse[RejectFeedMemberInviteResponse]:
        path_params = {
            "feed_group_id": feed_group_id,
            "feed_id": feed_id,
        }
        json = build_body_dict(user_id=user_id, user=user)

        return self.post(
            "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/members/reject",
            RejectFeedMemberInviteResponse,
            path_params=path_params,
            json=json,
        )

    def get_follow_suggestions(
        self,
        feed_group_id: str,
        limit: Optional[int] = None,
        user_id: Optional[str] = None,
    ) -> StreamResponse[GetFollowSuggestionsResponse]:
        query_params = build_query_param(limit=limit, user_id=user_id)
        path_params = {
            "feed_group_id": feed_group_id,
        }

        return self.get(
            "/api/v2/feeds/feed_groups/{feed_group_id}/follow_suggestions",
            GetFollowSuggestionsResponse,
            query_params=query_params,
            path_params=path_params,
        )

    def delete_feed_group(
        self, id: str, hard_delete: Optional[bool] = None
    ) -> StreamResponse[DeleteFeedGroupResponse]:
        query_params = build_query_param(hard_delete=hard_delete)
        path_params = {
            "id": id,
        }

        return self.delete(
            "/api/v2/feeds/feed_groups/{id}",
            DeleteFeedGroupResponse,
            query_params=query_params,
            path_params=path_params,
        )

    def get_feed_group(self, id: str) -> StreamResponse[GetFeedGroupResponse]:
        path_params = {
            "id": id,
        }

        return self.get(
            "/api/v2/feeds/feed_groups/{id}",
            GetFeedGroupResponse,
            path_params=path_params,
        )

    def get_or_create_feed_group(
        self,
        id: str,
        default_visibility: Optional[str] = None,
        activity_processors: Optional[List[ActivityProcessorConfig]] = None,
        activity_selectors: Optional[List[ActivitySelectorConfig]] = None,
        aggregation: Optional[AggregationConfig] = None,
        custom: Optional[Dict[str, object]] = None,
        notification: Optional[NotificationConfig] = None,
        push_notification: Optional[PushNotificationConfig] = None,
        ranking: Optional[RankingConfig] = None,
    ) -> StreamResponse[GetOrCreateFeedGroupResponse]:
        path_params = {
            "id": id,
        }
        json = build_body_dict(
            default_visibility=default_visibility,
            activity_processors=activity_processors,
            activity_selectors=activity_selectors,
            aggregation=aggregation,
            custom=custom,
            notification=notification,
            push_notification=push_notification,
            ranking=ranking,
        )

        return self.post(
            "/api/v2/feeds/feed_groups/{id}",
            GetOrCreateFeedGroupResponse,
            path_params=path_params,
            json=json,
        )

    def update_feed_group(
        self,
        id: str,
        activity_processors: Optional[List[ActivityProcessorConfig]] = None,
        activity_selectors: Optional[List[ActivitySelectorConfig]] = None,
        aggregation: Optional[AggregationConfig] = None,
        custom: Optional[Dict[str, object]] = None,
        notification: Optional[NotificationConfig] = None,
        push_notification: Optional[PushNotificationConfig] = None,
        ranking: Optional[RankingConfig] = None,
    ) -> StreamResponse[UpdateFeedGroupResponse]:
        path_params = {
            "id": id,
        }
        json = build_body_dict(
            activity_processors=activity_processors,
            activity_selectors=activity_selectors,
            aggregation=aggregation,
            custom=custom,
            notification=notification,
            push_notification=push_notification,
            ranking=ranking,
        )

        return self.put(
            "/api/v2/feeds/feed_groups/{id}",
            UpdateFeedGroupResponse,
            path_params=path_params,
            json=json,
        )

    def list_feed_views(self) -> StreamResponse[ListFeedViewsResponse]:
        return self.get("/api/v2/feeds/feed_views", ListFeedViewsResponse)

    def create_feed_view(
        self,
        id: str,
        activity_processors: Optional[List[ActivityProcessorConfig]] = None,
        activity_selectors: Optional[List[ActivitySelectorConfig]] = None,
        aggregation: Optional[AggregationConfig] = None,
        ranking: Optional[RankingConfig] = None,
    ) -> StreamResponse[CreateFeedViewResponse]:
        json = build_body_dict(
            id=id,
            activity_processors=activity_processors,
            activity_selectors=activity_selectors,
            aggregation=aggregation,
            ranking=ranking,
        )

        return self.post("/api/v2/feeds/feed_views", CreateFeedViewResponse, json=json)

    def delete_feed_view(self, id: str) -> StreamResponse[DeleteFeedViewResponse]:
        path_params = {
            "id": id,
        }

        return self.delete(
            "/api/v2/feeds/feed_views/{id}",
            DeleteFeedViewResponse,
            path_params=path_params,
        )

    def get_feed_view(self, id: str) -> StreamResponse[GetFeedViewResponse]:
        path_params = {
            "id": id,
        }

        return self.get(
            "/api/v2/feeds/feed_views/{id}",
            GetFeedViewResponse,
            path_params=path_params,
        )

    def get_or_create_feed_view(
        self,
        id: str,
        activity_processors: Optional[List[ActivityProcessorConfig]] = None,
        activity_selectors: Optional[List[ActivitySelectorConfig]] = None,
        aggregation: Optional[AggregationConfig] = None,
        ranking: Optional[RankingConfig] = None,
    ) -> StreamResponse[GetOrCreateFeedViewResponse]:
        path_params = {
            "id": id,
        }
        json = build_body_dict(
            activity_processors=activity_processors,
            activity_selectors=activity_selectors,
            aggregation=aggregation,
            ranking=ranking,
        )

        return self.post(
            "/api/v2/feeds/feed_views/{id}",
            GetOrCreateFeedViewResponse,
            path_params=path_params,
            json=json,
        )

    def update_feed_view(
        self,
        id: str,
        activity_processors: Optional[List[ActivityProcessorConfig]] = None,
        activity_selectors: Optional[List[ActivitySelectorConfig]] = None,
        aggregation: Optional[AggregationConfig] = None,
        ranking: Optional[RankingConfig] = None,
    ) -> StreamResponse[UpdateFeedViewResponse]:
        path_params = {
            "id": id,
        }
        json = build_body_dict(
            activity_processors=activity_processors,
            activity_selectors=activity_selectors,
            aggregation=aggregation,
            ranking=ranking,
        )

        return self.put(
            "/api/v2/feeds/feed_views/{id}",
            UpdateFeedViewResponse,
            path_params=path_params,
            json=json,
        )

    def create_feeds_batch(
        self, feeds: List[FeedRequest]
    ) -> StreamResponse[CreateFeedsBatchResponse]:
        json = build_body_dict(feeds=feeds)

        return self.post(
            "/api/v2/feeds/feeds/batch", CreateFeedsBatchResponse, json=json
        )

    def query_feeds(
        self,
        limit: Optional[int] = None,
        next: Optional[str] = None,
        prev: Optional[str] = None,
        watch: Optional[bool] = None,
        sort: Optional[List[SortParamRequest]] = None,
        filter: Optional[Dict[str, object]] = None,
    ) -> StreamResponse[QueryFeedsResponse]:
        json = build_body_dict(
            limit=limit, next=next, prev=prev, watch=watch, sort=sort, filter=filter
        )

        return self.post("/api/v2/feeds/feeds/query", QueryFeedsResponse, json=json)

    def update_follow(
        self,
        source: str,
        target: str,
        create_notification_activity: Optional[bool] = None,
        follower_role: Optional[str] = None,
        push_preference: Optional[str] = None,
        skip_push: Optional[bool] = None,
        custom: Optional[Dict[str, object]] = None,
    ) -> StreamResponse[UpdateFollowResponse]:
        json = build_body_dict(
            source=source,
            target=target,
            create_notification_activity=create_notification_activity,
            follower_role=follower_role,
            push_preference=push_preference,
            skip_push=skip_push,
            custom=custom,
        )

        return self.patch("/api/v2/feeds/follows", UpdateFollowResponse, json=json)

    def follow(
        self,
        source: str,
        target: str,
        create_notification_activity: Optional[bool] = None,
        push_preference: Optional[str] = None,
        skip_push: Optional[bool] = None,
        custom: Optional[Dict[str, object]] = None,
    ) -> StreamResponse[SingleFollowResponse]:
        json = build_body_dict(
            source=source,
            target=target,
            create_notification_activity=create_notification_activity,
            push_preference=push_preference,
            skip_push=skip_push,
            custom=custom,
        )

        return self.post("/api/v2/feeds/follows", SingleFollowResponse, json=json)

    def accept_follow(
        self, source: str, target: str, follower_role: Optional[str] = None
    ) -> StreamResponse[AcceptFollowResponse]:
        json = build_body_dict(
            source=source, target=target, follower_role=follower_role
        )

        return self.post(
            "/api/v2/feeds/follows/accept", AcceptFollowResponse, json=json
        )

    def follow_batch(
        self, follows: List[FollowRequest]
    ) -> StreamResponse[FollowBatchResponse]:
        json = build_body_dict(follows=follows)

        return self.post("/api/v2/feeds/follows/batch", FollowBatchResponse, json=json)

    def query_follows(
        self,
        limit: Optional[int] = None,
        next: Optional[str] = None,
        prev: Optional[str] = None,
        sort: Optional[List[SortParamRequest]] = None,
        filter: Optional[Dict[str, object]] = None,
    ) -> StreamResponse[QueryFollowsResponse]:
        json = build_body_dict(
            limit=limit, next=next, prev=prev, sort=sort, filter=filter
        )

        return self.post("/api/v2/feeds/follows/query", QueryFollowsResponse, json=json)

    def reject_follow(
        self, source: str, target: str
    ) -> StreamResponse[RejectFollowResponse]:
        json = build_body_dict(source=source, target=target)

        return self.post(
            "/api/v2/feeds/follows/reject", RejectFollowResponse, json=json
        )

    def unfollow(self, source: str, target: str) -> StreamResponse[UnfollowResponse]:
        path_params = {
            "source": source,
            "target": target,
        }

        return self.delete(
            "/api/v2/feeds/follows/{source}/{target}",
            UnfollowResponse,
            path_params=path_params,
        )

    def create_membership_level(
        self,
        id: str,
        name: str,
        description: Optional[str] = None,
        priority: Optional[int] = None,
        tags: Optional[List[str]] = None,
        custom: Optional[Dict[str, object]] = None,
    ) -> StreamResponse[CreateMembershipLevelResponse]:
        json = build_body_dict(
            id=id,
            name=name,
            description=description,
            priority=priority,
            tags=tags,
            custom=custom,
        )

        return self.post(
            "/api/v2/feeds/membership_levels", CreateMembershipLevelResponse, json=json
        )

    def query_membership_levels(
        self,
        limit: Optional[int] = None,
        next: Optional[str] = None,
        prev: Optional[str] = None,
        sort: Optional[List[SortParamRequest]] = None,
        filter: Optional[Dict[str, object]] = None,
    ) -> StreamResponse[QueryMembershipLevelsResponse]:
        json = build_body_dict(
            limit=limit, next=next, prev=prev, sort=sort, filter=filter
        )

        return self.post(
            "/api/v2/feeds/membership_levels/query",
            QueryMembershipLevelsResponse,
            json=json,
        )

    def delete_membership_level(self, id: str) -> StreamResponse[Response]:
        path_params = {
            "id": id,
        }

        return self.delete(
            "/api/v2/feeds/membership_levels/{id}", Response, path_params=path_params
        )

    def update_membership_level(
        self,
        id: str,
        description: Optional[str] = None,
        name: Optional[str] = None,
        priority: Optional[int] = None,
        tags: Optional[List[str]] = None,
        custom: Optional[Dict[str, object]] = None,
    ) -> StreamResponse[UpdateMembershipLevelResponse]:
        path_params = {
            "id": id,
        }
        json = build_body_dict(
            description=description,
            name=name,
            priority=priority,
            tags=tags,
            custom=custom,
        )

        return self.patch(
            "/api/v2/feeds/membership_levels/{id}",
            UpdateMembershipLevelResponse,
            path_params=path_params,
            json=json,
        )

    def unfollow_batch(
        self, follows: List[FollowPair]
    ) -> StreamResponse[UnfollowBatchResponse]:
        json = build_body_dict(follows=follows)

        return self.post(
            "/api/v2/feeds/unfollow/batch", UnfollowBatchResponse, json=json
        )

    def delete_feed_user_data(
        self, user_id: str
    ) -> StreamResponse[DeleteFeedUserDataResponse]:
        path_params = {
            "user_id": user_id,
        }

        return self.delete(
            "/api/v2/feeds/users/{user_id}/delete",
            DeleteFeedUserDataResponse,
            path_params=path_params,
        )

    def export_feed_user_data(
        self, user_id: str
    ) -> StreamResponse[ExportFeedUserDataResponse]:
        path_params = {
            "user_id": user_id,
        }

        return self.post(
            "/api/v2/feeds/users/{user_id}/export",
            ExportFeedUserDataResponse,
            path_params=path_params,
        )
