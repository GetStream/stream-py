name: Release

on:
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:
    inputs:
      python-version:
        description: "Python version to use"
        default: "3.12"
        required: false

permissions:
  contents: read
  id-token: write

jobs:
  build-core:
    name: Build & Test Core SDK
    if: (github.event.pull_request.merged && startsWith(github.head_ref, 'release-')) || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: ci
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ github.event.inputs.python-version || '3.12' }}

      - name: Sync environment & install dev extras
        run: |
          uv sync --all-packages --all-extras --dev --all-groups

      - name: Build core distributions
        run: |
          uv build -o dist

      - name: Extract package version
        id: get_version
        run: |
          python - <<'PY'
          import re, os, pathlib, sys
          version_file = pathlib.Path('getstream') / 'version.py'
          content = version_file.read_text()
          match = re.search(r"VERSION\s*=\s*['\"]([^'\"]+)['\"]", content)
          if not match:
              sys.exit('Could not find VERSION in getstream/version.py')
          version = match.group(1)
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
              fh.write(f'version={version}\n')
          PY

      - name: Publish core to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          uv pip install --upgrade twine
          for FILE in dist/getstream*.whl; do
            BASENAME=$(basename "$FILE")
            PACKAGE_NAME=${BASENAME%%-*}
            VERSION=$(echo "$BASENAME" | cut -d'-' -f2) # 1.5.0a2 etc.
            echo "Checking if $PACKAGE_NAME version $VERSION exists on PyPI..."
            if pip index versions --pre "$PACKAGE_NAME" | grep -q "$VERSION"; then
              echo "Version $VERSION already exists for $PACKAGE_NAME – skipping upload."
            else
              echo "Uploading $BASENAME to PyPI."
              twine upload "$FILE"
            fi
          done

      - name: Install core from using uv
        run: |
          uv pip install "getstream==${{ steps.get_version.outputs.version }}"

      - name: Run core tests against PyPI artifact
        env:
          STREAM_BASE_URL: ${{ vars.STREAM_BASE_URL }}
          STREAM_API_KEY: ${{ vars.STREAM_API_KEY }}
          STREAM_API_SECRET: ${{ secrets.STREAM_API_SECRET }}
        run: |
          UV_NO_SOURCES=1 uv run pytest --ignore=getstream/plugins

  build-plugins:
    name: Build & Test Plugin Packages
    runs-on: ubuntu-latest
    needs: build-core
    environment: ci
    env:
      CORE_VERSION: ${{ needs.build-core.outputs.version }}
      UV_NO_SOURCES: "1"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ github.event.inputs.python-version || '3.12' }}

      - name: Install new core from PyPI using uv (for plugin builds/tests)
        run: |
          uv pip install "getstream==${CORE_VERSION}"

      - name: Sync environment & install dev extras
        run: |
          uv add useful-moonshine-onnx@git+https://github.com/usefulsensors/moonshine.git#subdirectory=moonshine-onnx
          uv sync --all-packages --all-extras --dev --all-groups

      - name: Check which plugins need updates
        id: check_plugins
        run: |
          set -e
          echo "Checking which plugins need to be updated..."

          # Get list of all plugin directories
          PLUGIN_DIRS=$(find getstream/plugins -name "pyproject.toml" -exec dirname {} \; | sort)
          PACKAGES_TO_BUILD=""
          PACKAGES_TO_TEST=""

          for PLUGIN_DIR in $PLUGIN_DIRS; do
            PLUGIN_NAME=$(basename "$PLUGIN_DIR")
            PACKAGE_NAME="getstream-plugins-${PLUGIN_NAME}"

            # Extract version from pyproject.toml
            VERSION=$(python -c "import tomllib; f=open('$PLUGIN_DIR/pyproject.toml','rb'); data=tomllib.load(f); f.close(); print(data['project']['version'])")

            echo "Checking $PACKAGE_NAME version $VERSION..."

            # Check if this version exists on PyPI
            if pip index versions --pre "$PACKAGE_NAME" | grep -q "$VERSION"; then
              echo "Version $VERSION already exists for $PACKAGE_NAME – skipping."
            else
              echo "Version $VERSION is new for $PACKAGE_NAME – will build and test."
              PACKAGES_TO_BUILD="$PACKAGES_TO_BUILD $PLUGIN_DIR"
              PACKAGES_TO_TEST="$PACKAGES_TO_TEST getstream/plugins/$PLUGIN_NAME"
            fi
          done

          echo "packages_to_build=$PACKAGES_TO_BUILD" >> "$GITHUB_OUTPUT"
          echo "packages_to_test=$PACKAGES_TO_TEST" >> "$GITHUB_OUTPUT"

          if [ -z "$PACKAGES_TO_BUILD" ]; then
            echo "No plugins need updating."
            echo "skip_build=true" >> "$GITHUB_OUTPUT"
          else
            echo "skip_build=false" >> "$GITHUB_OUTPUT"
            echo "Plugins to build:$PACKAGES_TO_BUILD"
            echo "Plugins to test:$PACKAGES_TO_TEST"
          fi

      - name: Build updated plugin dists only
        if: steps.check_plugins.outputs.skip_build == 'false'
        run: |
          mkdir -p dist-plugins
          PACKAGES_TO_BUILD="${{ steps.check_plugins.outputs.packages_to_build }}"

          for PLUGIN_DIR in $PACKAGES_TO_BUILD; do
            # Extract the actual package name from pyproject.toml
            PACKAGE_NAME=$(uv run python -c "import tomllib; f=open('$PLUGIN_DIR/pyproject.toml','rb'); data=tomllib.load(f); f.close(); print(data['project']['name'])")
            echo "Building $PLUGIN_DIR (package: $PACKAGE_NAME)..."
            uv build --package "$PACKAGE_NAME" -o dist-plugins --wheel --sdist
          done

      - name: Run plugin tests for updated packages only
        if: steps.check_plugins.outputs.skip_build == 'false'
        env:
          STREAM_BASE_URL: ${{ vars.STREAM_BASE_URL }}
          STREAM_API_KEY: ${{ vars.STREAM_API_KEY }}
          STREAM_API_SECRET: ${{ secrets.STREAM_API_SECRET }}
        run: |
          # Install all built plugin wheels using uv
          uv pip install dist-plugins/*.whl

          # Only test the packages that were built
          PACKAGES_TO_TEST="${{ steps.check_plugins.outputs.packages_to_test }}"

          if [ -n "$PACKAGES_TO_TEST" ]; then
            uv run pytest $PACKAGES_TO_TEST
          else
            echo "No packages to test."
          fi

      - name: Publish updated plugins to PyPI
        if: steps.check_plugins.outputs.skip_build == 'false'
        id: publish_plugins
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          set -e
          uv pip install --upgrade twine
          UPLOAD_LIST=""

          # Upload all files in dist-plugins (these are already filtered to new versions only)
          for FILE in dist-plugins/getstream_plugins_*.whl; do
            [ -f "$FILE" ] || continue  # Skip if no files match pattern

            BASENAME=$(basename "$FILE")
            PACKAGE_NAME=${BASENAME%%-*}
            VERSION=$(echo "$BASENAME" | cut -d'-' -f2)  # 1.5.0a2 etc.

            echo "Uploading $BASENAME to PyPI..."
            twine upload "$FILE"
            UPLOAD_LIST="$UPLOAD_LIST $PACKAGE_NAME==$VERSION"
          done

          # Expose the list (space-separated) as a step output
          echo "install_list=$UPLOAD_LIST" >> "$GITHUB_OUTPUT"

      - name: Install uploaded plugins from PyPI using uv
        if: steps.publish_plugins.outputs.install_list != ''
        env:
          INSTALL_LIST: ${{ steps.publish_plugins.outputs.install_list }}
        run: |
          uv pip install "getstream==${CORE_VERSION}" $INSTALL_LIST
      - name: Install core (only) if no new plugins were uploaded
        if: steps.publish_plugins.outputs.install_list == ''
        run: |
          uv pip install "getstream==${CORE_VERSION}"

      - name: Run all plugin tests against PyPI artifacts
        run: |
          uv run pytest getstream/plugins
